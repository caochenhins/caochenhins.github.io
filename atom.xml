<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曹辰的博客</title>
  
  <subtitle>跨界设计尸，产品狗，技术宅，美剧痴迷者，音乐重度爱好者…</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caochenhins.github.io/"/>
  <updated>2019-03-22T11:54:50.301Z</updated>
  <id>https://caochenhins.github.io/</id>
  
  <author>
    <name>曹辰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>README</title>
    <link href="https://caochenhins.github.io/2020/03/21/README/"/>
    <id>https://caochenhins.github.io/2020/03/21/README/</id>
    <published>2020-03-21T14:42:55.000Z</published>
    <updated>2019-03-22T11:54:50.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x75BE;&#x98CE;&#x77E5;&#x52B2;&#x8349;&#xFF0C;&#x667A;&#x8005;&#x5FC5;&#x6000;&#x4EC1;&#xFF0C;&#x65F6;&#x523B;&#x5B66;&#x4E60;&#x603B;&#x7ED3;"><a href="#&#x75BE;&#x98CE;&#x77E5;&#x52B2;&#x8349;&#xFF0C;&#x667A;&#x8005;&#x5FC5;&#x6000;&#x4EC1;&#xFF0C;&#x65F6;&#x523B;&#x5B66;&#x4E60;&#x603B;&#x7ED3;" class="headerlink" title="&#x75BE;&#x98CE;&#x77E5;&#x52B2;&#x8349;&#xFF0C;&#x667A;&#x8005;&#x5FC5;&#x6000;&#x4EC1;&#xFF0C;&#x65F6;&#x523B;&#x5B66;&#x4E60;&#x603B;&#x7ED3;"></a>&#x75BE;&#x98CE;&#x77E5;&#x52B2;&#x8349;&#xFF0C;&#x667A;&#x8005;&#x5FC5;&#x6000;&#x4EC1;&#xFF0C;&#x65F6;&#x523B;&#x5B66;&#x4E60;&#x603B;&#x7ED3;</h1><p><code>&#x9879;&#x76EE;&#x8BF4;&#x660E;&#xFF1A;</code></p><ul><li>&#x4EE5;&#x4E0B;&#x7B14;&#x8BB0;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x5B66;&#x4E60;&#x5B9E;&#x8DF5;&#x540E;&#x603B;&#x7ED3;&#x51FA;&#x6765;&#x7684;&#xFF0C;&#x5176;&#x4E2D;&#x4E0D;&#x53EF;&#x907F;&#x514D;&#x5B58;&#x5728;&#x7B14;&#x8BEF;&#x6216;&#x8005;&#x6709;&#x7406;&#x89E3;&#x9519;&#x8BEF;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x6B22;&#x8FCE;&#x6307;&#x51FA;&#x3002;</li><li>&#x4EE5;&#x4E0B;&#x5217;&#x4E3E;&#x7684;&#x7B14;&#x8BB0;&#x90FD;&#x53EF;&#x4EE5;&#x5728;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x627E;&#x5230;&#x3002;</li><li>&#x7B14;&#x8BB0;&#x4E2D;&#x6709;&#x683C;&#x5F0F;&#x663E;&#x73B0;&#x9519;&#x8BEF;&#xFF0C;&#x539F;&#x56E0;&#x662F;&#x65E9;&#x671F;&#x603B;&#x7ED3;&#x5BF9;markdown&#x8BED;&#x6CD5;&#x4E0D;&#x662F;&#x5F88;&#x719F;&#x7EC3;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x9700;&#x8981;&#x539F;&#x7248;&#x6587;&#x4EF6;&#xFF0C;&#x8BF7;&#x63D0;&#x51FA;&#x3002;</li><li>&#x9879;&#x76EE;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x5B58;&#x653E;&#x4E00;&#x4E9B;&#x4F18;&#x8D28;&#x7684;&#x5E38;&#x7528;API&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x6709;&#x8D44;&#x6E90;&#xFF0C;&#x4E14;&#x6709;&#x5FC3;&#x60F3;&#x5206;&#x4EAB;&#xFF0C;&#x8BF7;&#x63D0;&#x51FA;&#x3002;</li><li>&#x4E00;&#x4E0B;&#x7B14;&#x8BB0;&#x91CD;&#x70B9;&#x5728;&#x4E8E;&#x8BB0;&#x5F55;&#x5B66;&#x4E60;&#x8FC7;&#x7A0B;&#xFF0C;&#x5BF9;&#x6280;&#x672F;&#x4F7F;&#x7528;&#x7684;&#x603B;&#x7ED3;&#x7B14;&#x8BB0;&#x5728;&#x6211;&#x7684;&#x4E2A;&#x4EBA;&#x535A;&#x5BA2;&#x4E0A;&#xFF1A;<a href="https://caochenhins.github.io">&#x66F9;&#x8FB0;&#x535A;&#x5BA2;</a></li><li><code>&#x8FD9;&#x4E2A;&#x9879;&#x76EE;&#x4F1A;&#x6301;&#x7EED;&#x66F4;&#x65B0;&#xFF0C;&#x6B22;&#x8FCE;start,&#x4EE5;&#x8D44;&#x9F13;&#x52B1;&#xFF0C;&#x611F;&#x8C22;</code><a id="more"></a><h2 id="&#x8BB0;&#x5F55;&#x81EA;&#x5DF1;&#x7684;&#x5B66;&#x4E60;&#x8F68;&#x8FF9;"><a href="#&#x8BB0;&#x5F55;&#x81EA;&#x5DF1;&#x7684;&#x5B66;&#x4E60;&#x8F68;&#x8FF9;" class="headerlink" title="&#x8BB0;&#x5F55;&#x81EA;&#x5DF1;&#x7684;&#x5B66;&#x4E60;&#x8F68;&#x8FF9;"></a>&#x8BB0;&#x5F55;&#x81EA;&#x5DF1;&#x7684;&#x5B66;&#x4E60;&#x8F68;&#x8FF9;</h2></li><li><code>2018&#x5E74;07&#x6708;05&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;Mybatis&#x77E5;&#x8BC6;&#x603B;&#x7ED3;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#x5B66;&#x4E60;&#x603B;&#x7ED3;</li><li>&#x524D;&#x7AEF;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;Vue.js&#x5B66;&#x4E60;&#x603B;&#x7ED3;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;Mysql&#x5B66;&#x4E60;&#x603B;&#x7ED3;</li></ul></li><li><code>2018&#x5E74;07&#x6708;06&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x65E5;&#x5E38;&#x5DE5;&#x4F5C;&#x7ECF;&#x9A8C;&#x603B;&#x7ED3;&#x7CFB;&#x5217;&#xFF08;&#x4E00;&#xFF09;&#x2014;&#x2013;Java8&#x4F18;&#x96C5;&#x53BB;&#x91CD;</li><li>JavaEE&#x65E5;&#x5E38;&#x5DE5;&#x4F5C;&#x7ECF;&#x9A8C;&#x603B;&#x7ED3;&#x7CFB;&#x5217;&#xFF08;&#x4E8C;&#xFF09;&#x2014;&#x2013;&#x4EE3;&#x7801;&#x89C4;&#x8303;</li><li>CentOS7&#x7684;&#x5B89;&#x88C5;</li><li>CentOS7&#x5E38;&#x7528;&#x547D;&#x4EE4;</li><li>CentOS7&#x5B89;&#x88C5;JDK1.8</li><li>CentOS7&#x8D1F;&#x8F7D;&#x5747;&#x8861;&#x670D;&#x52A1;&#x5668;Nginx</li><li>centos7&#x7F51;&#x5361;&#x914D;&#x7F6E;</li><li>nginx&#x4F7F;&#x7528;ssl&#x6A21;&#x5757;&#x914D;&#x7F6E;HTTPS&#x652F;&#x6301;</li><li>CentOS7&#x5B89;&#x88C5;Jexus</li><li>CentOS7&#x5B89;&#x88C5;MariaDB</li><li>CentOS7&#x5B89;&#x88C5;Mono</li><li>CentOS7&#x5B89;&#x88C5;Redis</li><li>CentOS7&#x5B89;&#x88C5;Tomcat</li><li>CentOS7&#x5B89;&#x88C5;&#x9632;&#x706B;&#x5899;</li></ul></li><li><code>2018&#x5E74;07&#x6708;08&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;Java8&#x65B0;&#x7279;&#x6027;&#x5B66;&#x4E60;&#x603B;&#x7ED3;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;PostgreSQL&#x5B66;&#x4E60;&#x603B;&#x7ED3;</li><li>&#x5927;&#x6570;&#x636E;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;Hive&#x5B66;&#x4E60;&#x7B14;&#x8BB0;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x88C5;&#x9970;&#x8005;&#x6A21;&#x5F0F;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5B66;&#x4E60;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x5F02;&#x5E38;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x6570;&#x636E;&#x7ED3;&#x6784;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x524D;&#x7AEF;&#x6846;&#x67B6;react-1</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x524D;&#x7AEF;&#x89C4;&#x8303;ES6</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;&#x4E4B;LinkList</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;&#x4E4B;HashMap</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x7EE7;&#x627F;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;&#x4E4B;LinkList</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;&#x4E4B;HashMap</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;&#x4E4B;ConcurrentHashMap</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;&#x4E4B;ArrayList</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x96C6;&#x5408;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x89C2;&#x5BDF;&#x8005;&#x6A21;&#x5F0F;</li></ul></li><li><code>2018&#x5E74;07&#x6708;09&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x62BD;&#x8C61;&#x7C7B;&#x548C;&#x63A5;&#x53E3;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x591A;&#x6001;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x6CDB;&#x578B;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x524D;&#x7AEF;&#x89C4;&#x8303;ES5</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Static&#x5173;&#x952E;&#x5B57;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;Typora&#x5E38;&#x7528;&#x5FEB;&#x6377;&#x952E;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;Webstrom&#x5E38;&#x7528;&#x5FEB;&#x6377;&#x952E;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-&#x5355;&#x4F8B;&#x6A21;&#x5F0F;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x4E00;&#xFF09;&#x7B80;&#x4ECB;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x4E8C;&#xFF09;&#x5168;&#x5C40;&#x914D;&#x7F6E;&#x6587;&#x4EF6;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x4E09;&#xFF09;&#x6620;&#x5C04;&#x6587;&#x4EF6;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x56DB;&#xFF09;&#x52A8;&#x6001;SQL</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x4E94;&#xFF09;&#x7F13;&#x5B58;&#x673A;&#x5236;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x516D;&#xFF09;MBG&#x9006;&#x5411;&#x5DE5;&#x7A0B;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-MyBatis&#xFF08;&#x4E03;&#xFF09;&#x63D2;&#x4EF6;&#x5F00;&#x53D1;</li></ul></li><li><code>2018&#x5E74;07&#x6708;10&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E00;&#xFF09;&#x6570;&#x636E;&#x5E93;&#x7B80;&#x4ECB;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E8C;&#xFF09;DQL&#x8BED;&#x8A00;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E09;&#xFF09;DML&#x8BED;&#x8A00;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x56DB;&#xFF09;DDL&#x8BED;&#x8A00;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E94;&#xFF09;&#x6570;&#x636E;&#x5E93;&#x4E8B;&#x52A1;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x516D;&#xFF09;&#x6570;&#x636E;&#x5E93;&#x89C6;&#x56FE;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;MySql&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E03;&#xFF09;&#x6570;&#x636E;&#x5E93;&#x5B58;&#x50A8;&#x8FC7;&#x7A0B;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-PostgreSQL&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E00;&#xFF09;&#x57FA;&#x7840;&#x90E8;&#x5206;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-PostgreSQL&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E8C;&#xFF09;&#x67E5;&#x8BE2;&#x5DE5;&#x5177;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-PostgreSQL&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E09;&#xFF09;&#x6761;&#x4EF6;&#x67E5;&#x8BE2;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-PostgreSQL&#x6570;&#x636E;&#x5E93;&#xFF08;&#x56DB;&#xFF09;&#x8FDE;&#x63A5;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-PostgreSQL&#x6570;&#x636E;&#x5E93;&#xFF08;&#x4E94;&#xFF09;&#x9AD8;&#x7EA7;&#x90E8;&#x5206;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Final&#x5173;&#x952E;&#x5B57;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Object&#x7C7B;</li><li>JavaEE&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;P3C&#x95EE;&#x9898;&#x603B;&#x7ED3;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Java8-1-Lambda&#x8868;&#x8FBE;&#x5F0F;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Java8-2-&#x51FD;&#x6570;&#x5F0F;&#x63A5;&#x53E3;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Java8-3-&#x65B9;&#x6CD5;&#x5F15;&#x7528;&#x548C;&#x6784;&#x9020;&#x5668;&#x5F15;&#x7528;</li></ul></li><li><code>2018&#x5E74;07&#x6708;11&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Java8-4-1-StreamAPI</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Java8-4-2-StreamAPI</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Java8-6-&#x65F6;&#x95F4;API</li></ul></li><li><code>2018&#x5E74;07&#x6708;12&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>CSS 3.0&#x53C2;&#x8003;&#x624B;&#x518C;</li><li>JavaScript&#x6838;&#x5FC3;&#x53C2;&#x8003;&#x624B;&#x518C;</li><li>jQuery1.7 &#x4E2D;&#x6587;&#x624B;&#x518C;</li><li>jQuery1.11.3 &#x4E2D;&#x6587;&#x624B;&#x518C;</li><li>W3School&#x624B;&#x518C;</li></ul></li><li><code>2018&#x5E74;07&#x6708;14&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>&#x524D;&#x7AEF;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;CSS3&#x603B;&#x7ED3;&#xFF08;&#x4E00;&#xFF09;&#x9009;&#x62E9;&#x5668;</li><li>&#x524D;&#x7AEF;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;CSS3&#x603B;&#x7ED3;&#xFF08;&#x4E8C;&#xFF09;&#x65B0;&#x589E;UI&#x65B9;&#x6848;</li><li>&#x524D;&#x7AEF;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;CSS3&#x603B;&#x7ED3;&#xFF08;&#x4E09;&#xFF09;&#x6E10;&#x53D8;&#x5B9E;&#x4F8B;&#x53D1;&#x5ECA;&#x706F;</li><li>&#x524D;&#x7AEF;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;CSS3&#x603B;&#x7ED3;&#xFF08;&#x56DB;&#xFF09;&#x6E10;&#x53D8;&#x5B9E;&#x4F8B;&#x5149;&#x6591;&#x52A8;&#x753B;</li></ul></li><li><code>2018&#x5E74;07&#x6708;15&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-JavaNIO-1-&#x7F13;&#x51B2;&#x533A;-&#x901A;&#x9053;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-JavaNIO-2-&#x5206;&#x6563;&#x8BFB;&#x53D6;&#x548C;&#x805A;&#x96C6;&#x5199;&#x5165;-&#x963B;&#x585E;&#x7F51;&#x7EDC;&#x901A;&#x4FE1;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-JavaNIO-3-&#x975E;&#x963B;&#x585E;&#x5F0F;-DatagramChannel</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-JavaNIO-4-NIO2-File&#x7C7B;</li></ul></li><li><code>2018&#x5E74;07&#x6708;17&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>&#x524D;&#x7AEF;&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;CSS3&#x5B66;&#x4E60;&#x603B;&#x7ED3;</li></ul></li><li><code>2018&#x5E74;07&#x6708;19&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>&#x524D;&#x7AEF;&#x77E5;&#x8BC6;&#x65E5;&#x5E38;&#x603B;&#x7ED3;&#x7CFB;&#x5217;&#xFF08;&#x4E09;&#xFF09;&#x2014;&#x2013;CSS&#x6D6E;&#x52A8;&#x7406;&#x89E3;</li></ul></li><li><p><code>2018&#x5E74;07&#x6708;20&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code></p><ul><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Quartz-1-HelloWord</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Quartz-2-&#x89E6;&#x53D1;&#x5668;Trigger</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Quartz-3-Scheduler&#x51FD;&#x6570;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-Quartz-4-Quartz&#x6574;&#x5408;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-1-&#x9879;&#x76EE;&#x521D;&#x59CB;&#x5316;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-2-&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-3-&#x63A7;&#x5236;&#x7C7B;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-4-&#x6570;&#x636E;&#x5E93;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-5-&#x4E8B;&#x52A1;&#x7BA1;&#x7406;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-6-&#x8868;&#x5355;&#x9A8C;&#x8BC1;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-7-AOP&#x5904;&#x7406;&#x8BF7;&#x6C42;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-8-&#x5F02;&#x5E38;&#x5904;&#x7406;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-9-&#x5355;&#x5143;&#x6D4B;&#x8BD5;&#x77E5;&#x8BC6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-10-&#x914D;&#x7F6E;&#x6587;&#x4EF6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-11-&#x65E5;&#x5FD7;&#x6846;&#x67B6;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot-12-web</li></ul></li><li><p><code>2018&#x5E74;07&#x6708;21&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code></p><ul><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot&#x9AD8;&#x7EA7;&#xFF08;&#x4E8C;&#xFF09;SpringBoot&#x4F7F;&#x7528;&#x7F13;&#x5B58;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot&#x9AD8;&#x7EA7;&#xFF08;&#x516D;&#xFF09;SpringBoot&#x6574;&#x5408;RabbitMQ</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot&#x9AD8;&#x7EA7;&#xFF08;&#x4E09;&#xFF09;&#x7F13;&#x5B58;&#x6CE8;&#x89E3;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot&#x9AD8;&#x7EA7;&#xFF08;&#x56DB;&#xFF09;SpringBoot&#x6574;&#x5408;Redis</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot&#x9AD8;&#x7EA7;&#xFF08;&#x4E94;&#xFF09;SpringBoot&#x4E0E;&#x6D88;&#x606F;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;-SpringBoot&#x9AD8;&#x7EA7;&#xFF08;&#x4E00;&#xFF09;JSR107&#x7F13;&#x5B58;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x516B;&#xFF09;Hystrix&#x65AD;&#x8DEF;&#x5668;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x4E8C;&#xFF09;&#x5B9E;&#x8DF5;&#x51C6;&#x5907;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x4E5D;&#xFF09;Zuul&#x8DEF;&#x7531;&#x7F51;&#x5173;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x516D;&#xFF09;Ribbon&#x8D1F;&#x8F7D;&#x5747;&#x8861;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x4E03;&#xFF09;Feign&#x8D1F;&#x8F7D;&#x5747;&#x8861;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x4E09;&#xFF09;Eureka&#x670D;&#x52A1;&#x6CE8;&#x518C;&#x4E0E;&#x53D1;&#x73B0;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x5341;&#xFF09;SpringCloudConfig&#x914D;&#x7F6E;&#x4E2D;&#x5FC3;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x56DB;&#xFF09;Eureka&#x96C6;&#x7FA4;&#x914D;&#x7F6E;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x4E94;&#xFF09;Eureka&#x548C;Zookeeper&#x533A;&#x522B;</li><li>JavaEE&#x8FDB;&#x9636;&#x77E5;&#x8BC6;&#x5B66;&#x4E60;&#x2014;&#x2013;SpringCloud&#xFF08;&#x4E00;&#xFF09;&#x6982;&#x8FF0;</li></ul></li><li><p><code>2018&#x5E74;07&#x6708;22&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code></p><ul><li>CSS3&#x8111;&#x56FE;&#x603B;&#x7ED3;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;</li></ul></li><li><code>2018&#x5E74;07&#x6708;30&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>jQuery&#x5B66;&#x4E60;&#x7B14;&#x8BB0;</li><li>JavaScript&#x5B66;&#x4E60;&#x7B14;&#x8BB0;</li><li>Javascript&#x9AD8;&#x7EA7;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;</li></ul></li><li><code>2018&#x5E74;07&#x6708;31&#x65E5;&#x5B66;&#x4E60;&#x8BB0;&#x5F55;</code><ul><li>MybatisPlus&#x5B66;&#x4E60;&#x7B14;&#x8BB0;</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;疾风知劲草，智者必怀仁，时刻学习总结&quot;&gt;&lt;a href=&quot;#疾风知劲草，智者必怀仁，时刻学习总结&quot; class=&quot;headerlink&quot; title=&quot;疾风知劲草，智者必怀仁，时刻学习总结&quot;&gt;&lt;/a&gt;疾风知劲草，智者必怀仁，时刻学习总结&lt;/h1&gt;&lt;p&gt;&lt;code&gt;项目说明：&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以下笔记都是自己学习实践后总结出来的，其中不可避免存在笔误或者有理解错误的地方，欢迎指出。&lt;/li&gt;
&lt;li&gt;以下列举的笔记都可以在项目中的文件夹中找到。&lt;/li&gt;
&lt;li&gt;笔记中有格式显现错误，原因是早期总结对markdown语法不是很熟练，如果你需要原版文件，请提出。&lt;/li&gt;
&lt;li&gt;项目中有一个文件夹存放一些优质的常用API，如果你有资源，且有心想分享，请提出。&lt;/li&gt;
&lt;li&gt;一下笔记重点在于记录学习过程，对技术使用的总结笔记在我的个人博客上：&lt;a href=&quot;https://caochenhins.github.io&quot;&gt;曹辰博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;这个项目会持续更新，欢迎start,以资鼓励，感谢&lt;/code&gt;
    
    </summary>
    
      <category term="README" scheme="https://caochenhins.github.io/categories/README/"/>
    
    
      <category term="README" scheme="https://caochenhins.github.io/tags/README/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-12-web</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-12-web/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-12-web/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:25:28.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBootWeb开发"><a href="#SpringBootWeb开发" class="headerlink" title="SpringBootWeb开发"></a>SpringBootWeb开发</h1><h2 id="1-SpringBoot静态资源映射规则"><a href="#1-SpringBoot静态资源映射规则" class="headerlink" title="1.SpringBoot静态资源映射规则"></a>1.SpringBoot静态资源映射规则</h2><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>1、所有的/webjars/**,都去classpath:/META-INF/resources/webjars/找资源</p><p>webjars:以jar包的方式引入资源，网页搜索webjars,选择maven的方式引入，例如引入jquery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问jQuery.js的路径为：localhost:8080/webjars/jquery/3.3.1/jquery.js</p><p>2.“/**”访问当前项目的任何资源，（静态资源的文件夹）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/static/"</span>,</span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br><span class="line"><span class="string">"/"</span>:当前项目的根路径</span><br></pre></td></tr></table></figure><p>访问l路径：localhost:8080/asserts/js/bootstrap.min.js</p><p>3.欢迎页面映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态资源文件夹下的index.html,例如访问localhost:8080</p><p>4.映射网页小图标，在静态资源文件夹下找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(</span><br><span class="line">  value = &#123;<span class="string">"spring.mvc.favicon.enabled"</span>&#125;,</span><br><span class="line">  matchIfMissing = <span class="keyword">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line">  <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>项目结构如下图：</p><p><img src="图片素材/8.png" alt></p><h2 id="2-SpringBoot引入thymeleaf"><a href="#2-SpringBoot引入thymeleaf" class="headerlink" title="2.SpringBoot引入thymeleaf"></a>2.SpringBoot引入thymeleaf</h2><p>1、pom.xml文件中引入thymeleaf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、默认使用的thymeleaf版本低，修改版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Thymeleaf基本使用"><a href="#3-Thymeleaf基本使用" class="headerlink" title="3.Thymeleaf基本使用"></a>3.Thymeleaf基本使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">".html"</span>;</span><br><span class="line">  <span class="comment">//只要我们将HTML页面存放在classpath:/templates/目录中，thymeleaf就能自动渲染</span></span><br></pre></td></tr></table></figure><p>注意：thymeleaf能渲染html页面，在Controller使用注解@Controller，不能使用@RestController注解。</p><p>使用thymeleaf方法如下：</p><ol><li>html页面引入thymeleaf域名空间</li><li>Controller类中收发请求和传递数据</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为指定的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"hello"</span>,<span class="string">"你好"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Thymeleaf语法"><a href="#4-Thymeleaf语法" class="headerlink" title="4.Thymeleaf语法"></a>4.Thymeleaf语法</h2><p>1、th:text:改变当前元素的文本内容的；可以使用th:任意html属性：来替换原生属性的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">th:id</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"你好"</span> <span class="attr">class</span>=<span class="string">"你好"</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Order</th><th>Feature</th><th>Attributes</th></tr></thead><tbody><tr><td>1</td><td>片段包含</td><td><code>th:insert`</code>th:replace`</td></tr><tr><td>2</td><td>遍历</td><td><code>th:each</code></td></tr><tr><td>3</td><td>条件判断</td><td><code>th:if`</code>th:unless<code>th:switch</code>th:case`</td></tr><tr><td>4</td><td>声明变量</td><td><code>th:object`</code>th:with`</td></tr><tr><td>5</td><td>任意属性修改</td><td><code>th:attr`</code>th:attrprepend<code></code>th:attrappend`</td></tr><tr><td>6</td><td>修改指定属性默认值</td><td><code>th:value`</code>th:href<code>th:src</code>…`</td></tr><tr><td>7</td><td>修改标签体内容</td><td><code>th:text（转义特殊字符）th:utext（不转义）</code></td></tr><tr><td>8</td><td>声明片段</td><td><code>th:fragment</code></td></tr><tr><td>9</td><td>移除片段</td><td><code>th:remove</code></td></tr></tbody></table><p>2、表达式语法（参考thymeleaf官方文档第四章）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:(表达式语法)</span><br><span class="line">  一、Variable Expressions: $&#123;...&#125;:获取变量值，OGNL</span><br><span class="line">  1、获取对象的属性，调用方法</span><br><span class="line">      $&#123;person.father.name&#125;</span><br><span class="line">      $&#123;person[&apos;father&apos;][&apos;name&apos;]&#125;</span><br><span class="line">      $&#123;countriesByCode.ES&#125;</span><br><span class="line">      $&#123;personsByName[&apos;Stephen Zucchini&apos;].age&#125;</span><br><span class="line">      $&#123;personsArray[0].name&#125;</span><br><span class="line">      $&#123;person.createCompleteName()&#125;</span><br><span class="line">      $&#123;person.createCompleteNameWithSeparator(&apos;-&apos;)&#125;</span><br><span class="line">  2、使用内置的对象（使用方法参见官方文档第四章的附录）</span><br><span class="line">      #ctx: the context object.</span><br><span class="line">      #vars: the context variables.</span><br><span class="line">      #locale: the context locale.</span><br><span class="line">      #request: (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">      #response: (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">      #session: (only in Web Contexts) the HttpSession object.</span><br><span class="line">      #servletContext: (only in Web Contexts) the ServletContext object.</span><br><span class="line">     3、内置工具对象（使用方法参见官方文档第四章的附录）</span><br><span class="line">     #execInfo: </span><br><span class="line">        #messages: </span><br><span class="line">        #uris:</span><br><span class="line">        #conversions:</span><br><span class="line">        #dates: </span><br><span class="line">        #calendars: </span><br><span class="line">        #numbers: methods for formatting numeric objects.</span><br><span class="line">        #strings:</span><br><span class="line">        #objects: methods for objects in general.</span><br><span class="line">        #bools: methods for boolean evaluation.</span><br><span class="line">        #arrays: methods for arrays.</span><br><span class="line">        #lists: methods for lists.</span><br><span class="line">        #sets: methods for sets.</span><br><span class="line">        #maps: methods for maps.</span><br><span class="line">        #aggregates: </span><br><span class="line">        #ids:</span><br><span class="line"> 二、 Selection Variable Expressions: *&#123;...&#125;：选择表达式，功能和$&#123;&#125;一样</span><br><span class="line">  &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span><br><span class="line">      &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  配合 th:object=&quot;$&#123;session.user&#125;&quot;使用，*相当于th:object</span><br><span class="line"> 三、Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line"> 四、Link URL Expressions: @&#123;...&#125;：定义URL链接</span><br><span class="line">  @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;</span><br><span class="line"> 五、Fragment Expressions: ~&#123;...&#125;：片段引用</span><br><span class="line">Literals（字面量）</span><br><span class="line">  Text literals: &apos;one text&apos;, &apos;Another one!&apos;,…</span><br><span class="line">  Number literals: 0, 34, 3.0, 12.3,…</span><br><span class="line">  Boolean literals: true, false</span><br><span class="line">  Null literal: null</span><br><span class="line">  Literal tokens: one, sometext, main,…</span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">  String concatenation: +</span><br><span class="line">  Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">  Binary operators: +, -, *, /, %</span><br><span class="line">  Minus sign (unary operator): -</span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">  Binary operators: and, or</span><br><span class="line">  Boolean negation (unary operator): !, not</span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">Comparators: &gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</span><br><span class="line">Equality operators: ==, != (eq, ne)</span><br><span class="line">Conditional operators:（条件运算，三元运算符）</span><br><span class="line">  If-then: (if) ? (then)</span><br><span class="line">  If-then-else: (if) ? (then) : (else)</span><br><span class="line">  Default: (value) ?: (defaultvalue)</span><br></pre></td></tr></table></figure><h2 id="5-thymeleaf基本使用"><a href="#5-thymeleaf基本使用" class="headerlink" title="5.thymeleaf基本使用"></a>5.thymeleaf基本使用</h2><p>controller数据准备如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"hello"</span>,<span class="string">"&lt;h1&gt;你好&lt;/h1&gt;"</span>);</span><br><span class="line">        map.put(<span class="string">"list"</span> , Arrays.asList(<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为指定的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">th:id</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;hello&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.country&#125;"</span>&gt;</span>US<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--会转义输出&lt;h1&gt;你好&lt;/h1&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--不会转义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:each每次遍历都会生成当前这个标签，三个h4标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$&#123;li&#125;"</span> <span class="attr">th:each</span>=<span class="string">"li:$&#123;list&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--高级写法：行内写法：[[...]] or [(...)]相当于th:text和th:utext--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;list&#125;"</span>&gt;</span>[[$&#123;user&#125;]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!--三个span标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-扩展SpringMVC"><a href="#6-扩展SpringMVC" class="headerlink" title="6.扩展SpringMVC"></a>6.扩展SpringMVC</h2><p>例如需要扩展如下SpringMVC功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--将hello请求也解析到success页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一配置类（@Configuration），继承WebMvcConfigurationSupport，不能标注@EnableWebMvc注解，需要扩展什么功能，就重写什么方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurationSupport扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//浏览器发送luo请求就直接来到success页面</span></span><br><span class="line">        registry.addViewController(<span class="string">"luo"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBootWeb开发&quot;&gt;&lt;a href=&quot;#SpringBootWeb开发&quot; class=&quot;headerlink&quot; title=&quot;SpringBootWeb开发&quot;&gt;&lt;/a&gt;SpringBootWeb开发&lt;/h1&gt;&lt;h2 id=&quot;1-SpringBoot静态资源映射规则&quot;&gt;&lt;a href=&quot;#1-SpringBoot静态资源映射规则&quot; class=&quot;headerlink&quot; title=&quot;1.SpringBoot静态资源映射规则&quot;&gt;&lt;/a&gt;1.SpringBoot静态资源映射规则&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习-----SpringCloud（十）SpringCloudConfig配置中心</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-----SpringCloud%EF%BC%88%E5%8D%81%EF%BC%89SpringCloudConfig%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习-----SpringCloud（十）SpringCloudConfig配置中心/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:21:03.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloudConfig配置中心"><a href="#SpringCloudConfig配置中心" class="headerlink" title="SpringCloudConfig配置中心"></a>SpringCloudConfig配置中心</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>就前面项目而言，分布面临的问题是配置问题，每一个项目都有一个yml文件，不好运维管理，所有需要一套集中式，动态的配置管理设施，SpringCloud提供了ConfigServer来解决这个问题。</p><p>SpringCloud Config是为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为 <strong>各个不同的微服务应用</strong>的环境提供了一个 <strong>中心化的外部配置</strong>。SpringCloud Config分为客户端和服务端，服务端也称 <strong>分布式配置中心，它是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供获取配置信息，加密和解密信息等访问接口，客户端是通过指定的配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具管理和访问配置内容。<br><a id="more"></a></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>集中管理配置文件</li><li>不同环境下不同配置，动态化的配置更新，分环境部署等</li><li>运行期间动态调整配置，不需要在每一个服务部署的机器编码上编写文件，服务会向配置中心拉取自己的配置信息</li><li>当配置发生变动时，服务不需要重启即可感知配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><h2 id="config服务端与GitHub通信"><a href="#config服务端与GitHub通信" class="headerlink" title="config服务端与GitHub通信"></a>config服务端与GitHub通信</h2><p><strong>GitHUb上新建一个microservicecloud-config的Repository</strong></p><p><strong>本地硬盘目录新建git仓库并clone</strong></p><p><strong>在D:\workspace2018\micorservicecloude-config\microservicecloud-config新建application.yml文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line"><span class="attr">    profiles:</span></span><br><span class="line"><span class="attr">    active:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Spring:</span></span><br><span class="line"><span class="attr">    profiles:</span> <span class="string">dev</span> </span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">micorservicecloud-config-luo-dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Spring:</span></span><br><span class="line"><span class="attr">    profiles:</span> <span class="string">test</span> </span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">micorservicecloud-config-luo-test</span></span><br></pre></td></tr></table></figure><p><strong>注意保存为utf-8的文件格式</strong></p><p><strong>将yml文件推送到GitHub上</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m&quot;&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>新建项目microservicecloud-config-3344</strong></p><p><strong>POM.xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-config-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springCloud Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 避免Config的Git插件报错：org/eclipse/jgit/api/TransportConfigCallback --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jgit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.jgit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.0.201712302008-r<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图形化监控 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 熔断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 热部署插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yml文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">  port:</span> <span class="number">3344</span> </span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span>  <span class="string">microservicecloud-config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="string">git@github.com:luokangyuan/microservicecloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br></pre></td></tr></table></figure><p><strong>主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config_3344_StartSpringCloudApp</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Config_3344_StartSpringCloudApp.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改host文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 config-3344.com</span><br></pre></td></tr></table></figure><p><strong>测试通过config微服务从GitHub上获取配置内容</strong></p><p>启动服务3344，访问<a href="http://config-3344.com:3344/application-dev.yml，http://config-3344.com:3344/application-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/application-dev.yml，http://config-3344.com:3344/application-test.yml</a></p><h2 id="config客户端获取github配置"><a href="#config客户端获取github配置" class="headerlink" title="config客户端获取github配置"></a>config客户端获取github配置</h2><p><strong>本地新建microservicecloud-config-client.yml文件,并推送到github</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8201</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">microservicecloud-config-client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">    client:</span></span><br><span class="line"><span class="attr">        service-url:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://eureka-dev.com:7001/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8202</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">microservicecloud-config-client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">    client:</span></span><br><span class="line"><span class="attr">        service-url:</span></span><br><span class="line"><span class="attr">            defaultZone:</span> <span class="attr">http://eureka-test.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p><strong>新建项目microservicecloud-config-client-3355，pom.xml文件如下</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringCloud Config客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>新建bootstrap.yml文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">microservicecloud-config-client</span> <span class="comment">#需要从github上读取的资源名称，注意没有yml后缀名</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">test</span>   <span class="comment">#本次访问的配置项</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span>   </span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://config-3344.com:3344</span>  <span class="comment">#本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址</span></span><br></pre></td></tr></table></figure><p>application.yml是用户级的资源配置文件，bootstrap.yml是系统级，优先级更高，保证不会被本地配置文件所覆盖</p><p><strong>修改host文件，增加映射</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 client-config.com</span><br></pre></td></tr></table></figure><p><strong>新建测试controller，从github读取配置信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.luo.springcloud.rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientRest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;eureka.client.service-url.defaultZone&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String eurekaServers;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/config"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String str = <span class="string">"applicationName: "</span> + applicationName + <span class="string">"\t eurekaServers:"</span> + eurekaServers + <span class="string">"\t port: "</span> + port;</span><br><span class="line">System.out.println(<span class="string">"******str: "</span> + str);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"applicationName: "</span> + applicationName + <span class="string">"\t eurekaServers:"</span> + eurekaServers + <span class="string">"\t port: "</span> + port;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新建主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClient_3355_StartSpringCloudApp</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ConfigClient_3355_StartSpringCloudApp.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>启动3344服务，启动3355服务，bootstrap.yml中的profile值是什么，决定从github上读取什么,ruguo</p><p>访问<a href="http://client-config.com:8201/config得到是github上的microservicecloud-config-client.yml文件中dev相关的配置信息" target="_blank" rel="noopener">http://client-config.com:8201/config得到是github上的microservicecloud-config-client.yml文件中dev相关的配置信息</a></p><p>访问<a href="http://client-config.com:8202/config得到是github上的microservicecloud-config-client.yml文件中test相关的配置信息" target="_blank" rel="noopener">http://client-config.com:8202/config得到是github上的microservicecloud-config-client.yml文件中test相关的配置信息</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloudConfig配置中心&quot;&gt;&lt;a href=&quot;#SpringCloudConfig配置中心&quot; class=&quot;headerlink&quot; title=&quot;SpringCloudConfig配置中心&quot;&gt;&lt;/a&gt;SpringCloudConfig配置中心&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;就前面项目而言，分布面临的问题是配置问题，每一个项目都有一个yml文件，不好运维管理，所有需要一套集中式，动态的配置管理设施，SpringCloud提供了ConfigServer来解决这个问题。&lt;/p&gt;
&lt;p&gt;SpringCloud Config是为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为 &lt;strong&gt;各个不同的微服务应用&lt;/strong&gt;的环境提供了一个 &lt;strong&gt;中心化的外部配置&lt;/strong&gt;。SpringCloud Config分为客户端和服务端，服务端也称 &lt;strong&gt;分布式配置中心，它是一个独立的微服务应用&lt;/strong&gt;，用来连接配置服务器并为客户端提供获取配置信息，加密和解密信息等访问接口，客户端是通过指定的配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具管理和访问配置内容。&lt;br&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习-----SpringCloud（六）Ribbon负载均衡</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-----SpringCloud%EF%BC%88%E5%85%AD%EF%BC%89Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习-----SpringCloud（六）Ribbon负载均衡/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:20:46.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><h2 id="Ribbon概述"><a href="#Ribbon概述" class="headerlink" title="Ribbon概述"></a>Ribbon概述</h2><p>Spring Cloude Ribbon是基于Netfilx Ribbon实现的一套客户端 负载均衡的工具，简单说，Ribbon是Netfilix发布的开源项目，主要功能就是提供 <strong>客户端的软件负载均衡算法</strong>，将Netfilix的中间层服务连接在一起，Ribbon客户端组件提供了一系列完善的配置项如连接超时，重试等，简单说，就是在配置文件中列出Load Balance后面的所有机器，Ribbon会自动的帮助你基于某种算法规则（简单轮询，随机连接等）去连接这些机器，也可以使用Ribbon自定义负载均衡算法。LB，即负载均衡，在微服务或者分布式集群中常用的一种应用。负载均衡就是将用户的请求平摊的分配到多个服务上，从而达到HA，常见的负载均衡软件有Nginx，LVS，硬件F5等<br><a id="more"></a></p><h2 id="Ribbon配置初步"><a href="#Ribbon配置初步" class="headerlink" title="Ribbon配置初步"></a>Ribbon配置初步</h2><p>由于Ribbon是客户端的负载均衡工具，所以我们需要修改的是客户端项目microservicecloud-consumer-dept-80</p><h3 id="POM-xml文件"><a href="#POM-xml文件" class="headerlink" title="POM.xml文件"></a>POM.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Ribbon相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改application-yml文件，添加Eureka的服务注册地址"><a href="#修改application-yml文件，添加Eureka的服务注册地址" class="headerlink" title="修改application.yml文件，添加Eureka的服务注册地址"></a>修改application.yml文件，添加Eureka的服务注册地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#自己不能注册</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="修改客户端配置类"><a href="#修改客户端配置类" class="headerlink" title="修改客户端配置类"></a>修改客户端配置类</h3><p>由于客户端使用restTemplate访问服务端中的数据接口，restTemplate配置在服务端的配置类中，所以修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">geRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改客户端主程序启动类"><a href="#修改客户端主程序启动类" class="headerlink" title="修改客户端主程序启动类"></a>修改客户端主程序启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DeptConsumer80_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改客户端访问类DeptController-Consumer-java"><a href="#修改客户端访问类DeptController-Consumer-java" class="headerlink" title="修改客户端访问类DeptController_Consumer.java"></a>修改客户端访问类DeptController_Consumer.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">"http://MICROSERVICECLOUD-DEPT"</span>;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动7001,7002,7003三个服务注册中心，启动8001服务提供者，启动80客户端，使用<a href="http://localhost/consumer/dept/list可以渠道对应的数据，在DeptController_Consumer使用的是http://MICROSERVICECLOUD-DEPT服务名称来调用服务的接口，相比之前的http://localhost:8001，Ribbon和Eureka整合后，Consumer可以直接通过服务名称来调用服务，而不再关心地址和端口号。" target="_blank" rel="noopener">http://localhost/consumer/dept/list可以渠道对应的数据，在DeptController_Consumer使用的是http://MICROSERVICECLOUD-DEPT服务名称来调用服务的接口，相比之前的http://localhost:8001，Ribbon和Eureka整合后，Consumer可以直接通过服务名称来调用服务，而不再关心地址和端口号。</a></p><h2 id="Ribbon负载均衡-1"><a href="#Ribbon负载均衡-1" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><p> 目前只有一个microservicecloud-provider-dept-8001服务提供者，为了实现Ribbon的负载均衡，所以我们需要多个服务提供者实例，新建microservicecloud-provider-dept-8002，microservicecloud-provider-dept-8003两个Module。参考8001的pom.xml文件修改8002,8003的pom.xml文件。拷贝8001中的所以类和配置文件mybatis和application.yml文件，将主启动类修改为对应的名字</p><h3 id="microservicecloud-provider-dept-8002服务提供者"><a href="#microservicecloud-provider-dept-8002服务提供者" class="headerlink" title="microservicecloud-provider-dept-8002服务提供者"></a>microservicecloud-provider-dept-8002服务提供者</h3><h4 id="使用的数据库SQL语句"><a href="#使用的数据库SQL语句" class="headerlink" title="使用的数据库SQL语句"></a>使用的数据库SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> cloudDB02 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> cloudDB02 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> UTF8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> cloudDB02 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">  deptno <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  dname <span class="built_in">VARCHAR</span> (<span class="number">60</span>),</span><br><span class="line">  db_source <span class="built_in">VARCHAR</span> (<span class="number">60</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'开发部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'人事部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'财务部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'市场部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'运维部'</span>,<span class="keyword">DATABASE</span>());</span><br></pre></td></tr></table></figure><h4 id="Application-yml文件"><a href="#Application-yml文件" class="headerlink" title="Application.yml文件"></a>Application.yml文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8002</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="comment"># mybatis配置文件所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.luo.springcloud.entities</span>        <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"><span class="attr">  mapper-locations:</span></span><br><span class="line"><span class="attr">  - classpath:</span><span class="string">mybatis/mapper/**/*.xml</span>                       <span class="comment"># mapper映射文件</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservicecloud-dept</span> </span><br><span class="line"><span class="attr">   datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>              <span class="comment"># mysql驱动包</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/cloudDB02</span>              <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">1234</span></span><br><span class="line"><span class="attr">    dbcp2:</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span>                                           <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span>                                       <span class="comment"># 初始化连接数</span></span><br><span class="line"><span class="attr">      max-total:</span> <span class="number">5</span>                                          <span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">      max-wait-millis:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="microservicecloud-provider-dept-8003服务提供者"><a href="#microservicecloud-provider-dept-8003服务提供者" class="headerlink" title="microservicecloud-provider-dept-8003服务提供者"></a>microservicecloud-provider-dept-8003服务提供者</h3><h4 id="使用的数据库SQL语句-1"><a href="#使用的数据库SQL语句-1" class="headerlink" title="使用的数据库SQL语句"></a>使用的数据库SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> cloudDB03 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> cloudDB03 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> UTF8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> cloudDB03 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">  deptno <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  dname <span class="built_in">VARCHAR</span> (<span class="number">60</span>),</span><br><span class="line">  db_source <span class="built_in">VARCHAR</span> (<span class="number">60</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'开发部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'人事部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'财务部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'市场部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'运维部'</span>,<span class="keyword">DATABASE</span>());</span><br></pre></td></tr></table></figure><h4 id="Application-yml文件-1"><a href="#Application-yml文件-1" class="headerlink" title="Application.yml文件"></a>Application.yml文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8003</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="comment"># mybatis配置文件所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.luo.springcloud.entities</span>        <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"><span class="attr">  mapper-locations:</span></span><br><span class="line"><span class="attr">  - classpath:</span><span class="string">mybatis/mapper/**/*.xml</span>                       <span class="comment"># mapper映射文件</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservicecloud-dept</span> </span><br><span class="line"><span class="attr">   datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>              <span class="comment"># mysql驱动包</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/cloudDB03</span>              <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">1234</span></span><br><span class="line"><span class="attr">    dbcp2:</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span>                                           <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span>                                       <span class="comment"># 初始化连接数</span></span><br><span class="line"><span class="attr">      max-total:</span> <span class="number">5</span>                                          <span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">      max-wait-millis:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="微服务提供者说明"><a href="#微服务提供者说明" class="headerlink" title="微服务提供者说明"></a>微服务提供者说明</h3><p>三个微服务提供者连接不同的数据库，因此在application.yml文件中，我们需要修改端口号和连接的数据库，注意的是三个微服务提供者的微服务名字保持一样，也就是如下的配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservicecloud-dept</span></span><br></pre></td></tr></table></figure><h3 id="负载均衡自测"><a href="#负载均衡自测" class="headerlink" title="负载均衡自测"></a>负载均衡自测</h3><p>访问连接<a href="http://localhost:8001/dept/list，http://localhost:8002/dept/list，http://localhost:8003/dept/list得到不同数据库数据，当我们启动服务注册中心7001,7002,7003,再启动80客户端，这个时候访问localhost/consumer/dept/list，每次刷新就会得到不同数据库的数据。这就是Ribbon默认的轮询算法的负载均衡。" target="_blank" rel="noopener">http://localhost:8001/dept/list，http://localhost:8002/dept/list，http://localhost:8003/dept/list得到不同数据库数据，当我们启动服务注册中心7001,7002,7003,再启动80客户端，这个时候访问localhost/consumer/dept/list，每次刷新就会得到不同数据库的数据。这就是Ribbon默认的轮询算法的负载均衡。</a></p><h2 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h2><h4 id="Ribbon负载均衡算法"><a href="#Ribbon负载均衡算法" class="headerlink" title="Ribbon负载均衡算法"></a>Ribbon负载均衡算法</h4><p>Ribbon默认提供的是轮询的负载均衡算法，完整了还有如下</p><table><thead><tr><th>RoundRobinRule</th><th>轮询</th></tr></thead><tbody><tr><td>RandomRule</td><td>随机</td></tr><tr><td>AvaliabilityFilteringRule</td><td>会先过滤由于多次访问故障而处于断路器跳闸的状态的服务和并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略</td></tr><tr><td>WeightedResponseTimeRule</td><td>根据平均响应时间计算所有服务的权重，响应时间越快服务权重越大</td></tr><tr><td>RetryRule</td><td>先按照RoundRobinRule策略获取服务，如果获取服务失败会在指定时间内重试</td></tr><tr><td>BestAvailableRule</td><td>会先过滤掉由于多次访问故障二处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</td></tr><tr><td>ZoneAvoidanceRule</td><td>默认规则，复合判断server所在的区域的性能和server的可用性选择服务器</td></tr></tbody></table><h4 id="Ribbon负载均衡算法使用方法"><a href="#Ribbon负载均衡算法使用方法" class="headerlink" title="Ribbon负载均衡算法使用方法"></a>Ribbon负载均衡算法使用方法</h4><p>在客户端的配置类ConfigBean.java中添加IRule的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">geRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ribbon自定义"><a href="#Ribbon自定义" class="headerlink" title="Ribbon自定义"></a>Ribbon自定义</h2><p>如果不使用Ribbon默认的七种负载均衡算法，这个时候就需要使用自定义负载均衡算法</p><h3 id="客户端主启动类使用注解-RibbonClient"><a href="#客户端主启动类使用注解-RibbonClient" class="headerlink" title="客户端主启动类使用注解@RibbonClient"></a>客户端主启动类使用注解@RibbonClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name=<span class="string">"MICROSERVICECLOUD-DEPT"</span>,configuration=MySelfRule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DeptConsumer80_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特此说明</strong></p><p>RibbonClient注解中的MySelfRule类使我们自定义负载均衡算法的类，但是，这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们这个自定义的配置类会被所有的Ribbon客户端所共享，也就说，达不到我们特殊化定制的目的。举例说明，自定义配置类不能放在项目主启动类所有的包以及子包下，因为主启动类使用注解@SpringBootApplication，这个注解点进去使用@ComponentScan注解</p><h3 id="自定义负载均衡算法"><a href="#自定义负载均衡算法" class="headerlink" title="自定义负载均衡算法"></a>自定义负载均衡算法</h3><p>轮询算法中每一个服务轮询一次，现在需求是每一个服务调用五次后在轮询下一个服务</p><h3 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.luo.myrule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RandomRule_lky();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义算法类"><a href="#自定义算法类" class="headerlink" title="自定义算法类"></a>自定义算法类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.luo.myrule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.AbstractLoadBalancerRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ILoadBalancer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomRule_lky</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span></span>&#123;</span><br><span class="line"><span class="comment">// total = 0 // 当total==5以后，我们指针才能往下走，</span></span><br><span class="line"><span class="comment">// index = 0 // 当前对外提供服务的服务器地址，</span></span><br><span class="line"><span class="comment">// total需要重新置为零，但是已经达到过一个5次，我们的index = 1</span></span><br><span class="line"><span class="comment">// 分析：我们5次，但是微服务只有8001 8002 8003 三台，OK？</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>; <span class="comment">// 总共被调用的次数，目前要求每台被调用5次</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;<span class="comment">// 当前提供服务的机器号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Server server = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line"><span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line"><span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//private int total = 0; // 总共被调用的次数，目前要求每台被调用5次</span></span><br><span class="line"><span class="comment">//private int currentIndex = 0;// 当前提供服务的机器号</span></span><br><span class="line">            <span class="keyword">if</span>(total &lt; <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            server = upList.get(currentIndex);</span><br><span class="line">            total++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            total = <span class="number">0</span>;</span><br><span class="line">            currentIndex++;</span><br><span class="line">            <span class="keyword">if</span>(currentIndex &gt;= upList.size())</span><br><span class="line">            &#123;</span><br><span class="line">              currentIndex = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">Thread.yield();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line"><span class="keyword">return</span> (server);</span><br><span class="line">&#125;</span><br><span class="line">server = <span class="keyword">null</span>;</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p># </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ribbon负载均衡&quot;&gt;&lt;a href=&quot;#Ribbon负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Ribbon负载均衡&quot;&gt;&lt;/a&gt;Ribbon负载均衡&lt;/h1&gt;&lt;h2 id=&quot;Ribbon概述&quot;&gt;&lt;a href=&quot;#Ribbon概述&quot; class=&quot;headerlink&quot; title=&quot;Ribbon概述&quot;&gt;&lt;/a&gt;Ribbon概述&lt;/h2&gt;&lt;p&gt;Spring Cloude Ribbon是基于Netfilx Ribbon实现的一套客户端 负载均衡的工具，简单说，Ribbon是Netfilix发布的开源项目，主要功能就是提供 &lt;strong&gt;客户端的软件负载均衡算法&lt;/strong&gt;，将Netfilix的中间层服务连接在一起，Ribbon客户端组件提供了一系列完善的配置项如连接超时，重试等，简单说，就是在配置文件中列出Load Balance后面的所有机器，Ribbon会自动的帮助你基于某种算法规则（简单轮询，随机连接等）去连接这些机器，也可以使用Ribbon自定义负载均衡算法。LB，即负载均衡，在微服务或者分布式集群中常用的一种应用。负载均衡就是将用户的请求平摊的分配到多个服务上，从而达到HA，常见的负载均衡软件有Nginx，LVS，硬件F5等&lt;br&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习-----SpringCloud（三）Eureka服务注册与发现</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-----SpringCloud%EF%BC%88%E4%B8%89%EF%BC%89Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习-----SpringCloud（三）Eureka服务注册与发现/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:20:57.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h1><h2 id="Eureka三大角色"><a href="#Eureka三大角色" class="headerlink" title="Eureka三大角色"></a>Eureka三大角色</h2><ul><li>Eureka Server提供服务注册和发现</li><li>Service Provider服务提供方将自身服务注册到Eureka， 从而使服务消费者能够找到</li><li>Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费<a id="more"></a><h2 id="1-Eureka-Server注册"><a href="#1-Eureka-Server注册" class="headerlink" title="1.Eureka Server注册"></a>1.Eureka Server注册</h2></li></ul><p>在上述项目的父工程中新建microservicecloud-eureka-7001，这个module是Eureka的服务中心</p><h3 id="POM-xml文件"><a href="#POM-xml文件" class="headerlink" title="POM.xml文件"></a>POM.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-eureka-7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--eureka-server服务端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml文件"><a href="#application-yml文件" class="headerlink" title="application.yml文件"></a>application.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">  port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">  client:</span> </span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line">      <span class="comment">#单机 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="EurekaServer主启动类"><a href="#EurekaServer主启动类" class="headerlink" title="EurekaServer主启动类"></a>EurekaServer主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span><span class="comment">// EurekaServer服务器端启动类，接收其它微服务注册进来</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer7001_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServer7001_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试EurekaServer"><a href="#测试EurekaServer" class="headerlink" title="测试EurekaServer"></a>测试EurekaServer</h3><p>浏览器输入<a href="http://localhost:7001/，看到Spring" target="_blank" rel="noopener">http://localhost:7001/，看到Spring</a> Eureka界面表示成功，这个访问链接和程序中的application.yml配置吻合。</p><h2 id="2-微服务注册"><a href="#2-微服务注册" class="headerlink" title="2.微服务注册"></a>2.微服务注册</h2><p>将microservicecloud-provider-dept-8001微服务注册到microservicecloud-eureka-7001中</p><h3 id="修改microservicecloud-provider-dept-8001的POM-xml文件"><a href="#修改microservicecloud-provider-dept-8001的POM-xml文件" class="headerlink" title="修改microservicecloud-provider-dept-8001的POM.xml文件"></a>修改microservicecloud-provider-dept-8001的POM.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改microservicecloud-provider-dept-8001的application-yml文件"><a href="#修改microservicecloud-provider-dept-8001的application-yml文件" class="headerlink" title="修改microservicecloud-provider-dept-8001的application.yml文件"></a>修改microservicecloud-provider-dept-8001的application.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span> <span class="comment">#客户端注册进eureka服务列表内</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>说明：defaultZone的地址对应Eureka Server服务注册中心的application.yml中的defaultZone路径</p><h3 id="microservicecloud-provider-dept-8001主程序类使用注解"><a href="#microservicecloud-provider-dept-8001主程序类使用注解" class="headerlink" title="microservicecloud-provider-dept-8001主程序类使用注解"></a>microservicecloud-provider-dept-8001主程序类使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 本服务启动后会注册到Eureka服务注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider8001_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DeptProvider8001_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试是否注册成功"><a href="#测试是否注册成功" class="headerlink" title="测试是否注册成功"></a>测试是否注册成功</h3><p>先启动Eureka服务注册中心microservicecloud-eureka-7001，启动微服务microservicecloud-provider-dept-8001，打开浏览器输入<a href="http://localhost:7001/，Application下出现**MICROSERVICECLOUD-DEPT**微服务名称，这个名称来源于microservicecloud-provider-dept-8001中application.ym文件中的配置属性，如下" target="_blank" rel="noopener">http://localhost:7001/，Application下出现**MICROSERVICECLOUD-DEPT**微服务名称，这个名称来源于microservicecloud-provider-dept-8001中application.ym文件中的配置属性，如下</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservicecloud-dept</span></span><br></pre></td></tr></table></figure><h2 id="3-微服务常用设置"><a href="#3-微服务常用设置" class="headerlink" title="3.微服务常用设置"></a>3.微服务常用设置</h2><h3 id="主机名称和服务名称修改"><a href="#主机名称和服务名称修改" class="headerlink" title="主机名称和服务名称修改"></a>主机名称和服务名称修改</h3><p>在Eureka中注册的微服务的Status的名称显示localhost或者显示电脑主机名，所以要修改服务的主机名称，修改方法如下，修改microservicecloud-provider-dept-8001中application.yml文件，修改后如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line"><span class="attr">   instance-id:</span> <span class="string">microservicecloud-dept8001</span></span><br></pre></td></tr></table></figure><h3 id="访问信息有IP信息提示"><a href="#访问信息有IP信息提示" class="headerlink" title="访问信息有IP信息提示"></a>访问信息有IP信息提示</h3><p>修改microservicecloud-provider-dept-8001中application.yml文件，修改后如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line"><span class="attr">  instance-id:</span> <span class="string">microservicecloud-dept8001</span></span><br><span class="line"><span class="attr">  prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment">#访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure><h3 id="微服务info内容详细信息"><a href="#微服务info内容详细信息" class="headerlink" title="微服务info内容详细信息"></a>微服务info内容详细信息</h3><p>增加microservicecloud-provider-dept-8001中POM.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- actuator监控信息完善 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总的父工程microservicecloud修改pom.xml添加构建build信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 说明在src/main/resources目录下的配置文件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 表示以$开始和以$结束的表示方法 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">delimit</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改microservicecloud-provider-dept-8001中application.yml文件，修改后如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span> </span><br><span class="line">  <span class="string">app.name:</span> <span class="string">luokangyuan-microservicecloud</span></span><br><span class="line">  <span class="string">company.name:</span> <span class="string">www.luokangyuan.com</span></span><br><span class="line">  <span class="string">build.artifactId:</span> <span class="string">$project.artifactId$</span></span><br><span class="line">  <span class="string">build.version:</span> <span class="string">$project.version$</span></span><br></pre></td></tr></table></figure><h2 id="4-Eureka的自我保护机制"><a href="#4-Eureka的自我保护机制" class="headerlink" title="4.Eureka的自我保护机制"></a>4.Eureka的自我保护机制</h2><h3 id="导致的原因"><a href="#导致的原因" class="headerlink" title="导致的原因"></a>导致的原因</h3><p>默认情况下，如果EurekaServer在一定的时间内没有接收到某一个微服务实例的心跳，EurekaServer将会注销该实例，页面就会看见一串红色提示，但是当网络分区发生故障时，微服务与EurekaServer无法进行正常的通信，此时本不应该注销这个微服务实例，这个时候，Eureka的自我保护机制就可以解决这个问题，当EurekaServer节点在短时间内丢失过多的客户端时（可能发生了网络故障），那么这个节点就会进入自我保护模式，一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务），当网络故障恢复后，该EurekaServer节点就会自动退出自我保护模式。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在自我保护模式下，EurekaServer会保护服务注册表中的信息，不再注销任何服务实例，当它收到的心跳数重新到阈值以上，该EurekaServer就会自动退出自我保护模式，也就是宁可保留错误的服务注册信息，也不盲目的删除任何可能健康的服务实例。</p><h2 id="5-服务发现"><a href="#5-服务发现" class="headerlink" title="5.服务发现"></a>5.服务发现</h2><p>对于注册近Eureka里面的微服务，可以通过服务发现来获取该服务的信息</p><h3 id="修改microservicecloud-provider-dept-8001的DeptController"><a href="#修改microservicecloud-provider-dept-8001的DeptController" class="headerlink" title="修改microservicecloud-provider-dept-8001的DeptController"></a>修改microservicecloud-provider-dept-8001的DeptController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/dept/discovery"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;String&gt; list = client.getServices();<span class="comment">//得到Eureka中所有的微服务</span></span><br><span class="line">  System.out.println(<span class="string">"**********"</span> + list);</span><br><span class="line"></span><br><span class="line">  List&lt;ServiceInstance&gt; srvList = client.getInstances(<span class="string">"MICROSERVICECLOUD-DEPT"</span>);</span><br><span class="line">  <span class="keyword">for</span> (ServiceInstance element : srvList) &#123;</span><br><span class="line">    System.out.println(element.getServiceId() + <span class="string">"\t"</span> </span><br><span class="line">                       + element.getHost() + <span class="string">"\t"</span> + element.getPort() + <span class="string">"\t"</span></span><br><span class="line">                       + element.getUri());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="microservicecloud-provider-dept-8001主启动类添加注解"><a href="#microservicecloud-provider-dept-8001主启动类添加注解" class="headerlink" title="microservicecloud-provider-dept-8001主启动类添加注解"></a>microservicecloud-provider-dept-8001主启动类添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 本服务启动后会注册到Eureka服务注册中心</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 服务发现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider8001_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DeptProvider8001_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自测试"><a href="#自测试" class="headerlink" title="自测试"></a>自测试</h3><p>启动服务注册中心microservicecloud-eureka-7001，再启动microservicecloud-provider-dept-8001，访问<a href="http://localhost:8001/dept/discovery可以得到这个服务的info信息，/dept/discovery接口就是microservicecloud-provider-dept-8001这个服务暴露给外部访问的接口。使用http://localhost:8001/dept/discovery测试，就是自己测试能不能使用" target="_blank" rel="noopener">http://localhost:8001/dept/discovery可以得到这个服务的info信息，/dept/discovery接口就是microservicecloud-provider-dept-8001这个服务暴露给外部访问的接口。使用http://localhost:8001/dept/discovery测试，就是自己测试能不能使用</a></p><h3 id="外部访服务暴露的接口"><a href="#外部访服务暴露的接口" class="headerlink" title="外部访服务暴露的接口"></a>外部访服务暴露的接口</h3><p>microservicecloud-consumer-dept-80调用microservicecloud-provider-dept-8001服务暴露在外的接口，修改microservicecloud-consumer-dept-80中的DeptController_Consumer，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试@EnableDiscoveryClient,消费端可以调用服务发现</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/consumer/dept/discovery"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">"/dept/discovery"</span>, Object.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者访问接口测试"><a href="#消费者访问接口测试" class="headerlink" title="消费者访问接口测试"></a>消费者访问接口测试</h3><p>启动microservicecloud-consumer-dept-80访问<a href="http://localhost/consumer/dept/discovery得到8001微服务信息" target="_blank" rel="noopener">http://localhost/consumer/dept/discovery得到8001微服务信息</a></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>microservicecloud-provider-dept-8001注册到EurekaServer服务中心</li><li>microservicecloud-provider-dept-8001将Controller中的某一个方法暴露出去（提供服务发现）</li><li>microservicecloud-consumer-dept-80中的Controller就可以调用微服务暴露出来的接口</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Eureka服务注册与发现&quot;&gt;&lt;a href=&quot;#Eureka服务注册与发现&quot; class=&quot;headerlink&quot; title=&quot;Eureka服务注册与发现&quot;&gt;&lt;/a&gt;Eureka服务注册与发现&lt;/h1&gt;&lt;h2 id=&quot;Eureka三大角色&quot;&gt;&lt;a href=&quot;#Eureka三大角色&quot; class=&quot;headerlink&quot; title=&quot;Eureka三大角色&quot;&gt;&lt;/a&gt;Eureka三大角色&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Eureka Server提供服务注册和发现&lt;/li&gt;
&lt;li&gt;Service Provider服务提供方将自身服务注册到Eureka， 从而使服务消费者能够找到&lt;/li&gt;
&lt;li&gt;Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费
    
    </summary>
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-9-单元测试知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-9-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-9-单元测试知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:56.892Z</updated>
    
    <content type="html"><![CDATA[<p>###单元测试</p><p>####1.先测试Services中的方法<br><a id="more"></a><br>    /**</p><pre><code> * 根据id查询一个用户 * @param id * @return */public User findOne(Integer id){    return userRepository.findOne(id);}</code></pre><p>####2.在项目目录中的test/java/com.study.springbootdemo中新建测试类</p><pre><code>import com.study.springbootdemo.domain.User;import com.study.springbootdemo.services.UserService;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserServicesTest {    @Autowired    private UserService userService;    @Test    public void findOneTest(){        User user = userService.findOne(1);        //使用断言        Assert.assertEquals(new Integer(15),user.getAge());    }}</code></pre><p>说明：断言是指我们的预期结果是否程序的执行结果是否一致，其中使用了@RunWith(SpringRunner.class)注解、@SpringBootTest注解。</p><p>####3.运行UserServicesTest，测试结果<br><img src="https://i.imgur.com/ImrPgsB.png" alt></p><p>####IDEA简单方法进行测试</p><p>#####第一步选中要测试的方法<br><img src="https://i.imgur.com/MPFNCtq.png" alt></p><p>#####第二步选择新建一个测试类<br><img src="https://i.imgur.com/o61ITQ2.png" alt></p><p>#####第三步选择要测试的方法<br><img src="https://i.imgur.com/fyFEW9l.png" alt></p><p>#####第四步结果如下<br><img src="https://i.imgur.com/a7A0BXA.png" alt></p><p>####3.测试API(controller中的方法这里使用IDEA生成API测试类和方法，这里是要模仿发送请求的测试，如下所示：</p><pre><code>@RunWith(SpringRunner.class)@SpringBootTest@AutoConfigureMockMvcpublic class UserControllerTest {    @Autowired    private MockMvc mvc;    @Test    public void userList() throws Exception {        mvc.perform(MockMvcRequestBuilders.get(&quot;/users&quot;))                .andExpect(MockMvcResultMatchers.status().isOk());    }}</code></pre><p>说明：</p><ol><li>这里比Services测试多了一个注解@AutoConfigureMockMvc。</li><li>MockMvcRequestBuilders.get(“/users”)表示发送的是get请求，当然还有put等请求</li><li>andExpect表示使用断言</li><li>MockMvcResultMatchers.status()表示获取的是状态</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###单元测试&lt;/p&gt;
&lt;p&gt;####1.先测试Services中的方法&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-7-AOP处理请求知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-7-AOP%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-7-AOP处理请求知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:48.134Z</updated>
    
    <content type="html"><![CDATA[<p>###AOP统一处理请求日志<br>AOP是一种编程范式，与编程语言无关，是一种程序设计思想。AOP:面向切面编程，OOP：面向对象编程，POP:面向过程编程，还有函数式编程等等。<br><a id="more"></a></p><p>###AOP实例-记录每一个HTTP请求</p><p>####1.添加依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>####2.编写切面，切入点类</p><pre><code>import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;@Aspect@Componentpublic class HttpAspect {    //使用log打印日志    private final static Logger logger = LoggerFactory.getLogger(HttpAspect.class);    @Pointcut(&quot;execution(public * com.study.springbootdemo.controller.UserController.*(..))&quot;)    public void log(){}    @Before(&quot;log()&quot;)    public void doBefore(JoinPoint joinPoint){        //记录Http请求        ServletRequestAttributes attributes = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        //记录URL        logger.info(&quot;url={}&quot;,request.getRequestURL());        //记录请求方法        logger.info(&quot;method={}&quot;,request.getMethod());        //记录请求ip        logger.info(&quot;ip={}&quot;,request.getRemoteAddr());        //记录请求类的类方法        logger.info(&quot;class_method={}&quot;,joinPoint.getSignature().getDeclaringTypeName()+&quot;.&quot;+joinPoint.getSignature().getName());        //记录参数        logger.info(&quot;args={}&quot;,joinPoint.getArgs());    }    @After(&quot;log()&quot;)    public void doAfter(){        logger.info(&quot;2222222222222222&quot;);    }}</code></pre><p>说明：</p><ol><li>@Pointcut(“execution(public <em> com.study.springbootdemo.controller.UserController.</em>(..))”)是一个切入点，表示UserController类中的所有方法。</li><li>@Aspect注解表示这是一个该类是一个切面类</li><li>@Component注解表示将该类交于Spring来管理，</li><li>@Before(“log()”)注解表示UserController类中的方法被访问前执行的方法</li><li>@After(“log()”)注解表示UserController类中的方法被访问后要执行的方法</li></ol><p>####3.启动程序，使用postman进行测试</p><p>#####3.1测试查询用户列表<br><img src="https://i.imgur.com/MLszY3E.png" alt></p><p>#####测试结果为：<br><img src="https://i.imgur.com/vrv1Kwd.png" alt></p><p>#####3.2测试添加一个用户<br><img src="https://i.imgur.com/2MM3FWC.png" alt></p><p>#####测试结果为：<br><img src="https://i.imgur.com/1dlGwz9.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###AOP统一处理请求日志&lt;br&gt;AOP是一种编程范式，与编程语言无关，是一种程序设计思想。AOP:面向切面编程，OOP：面向对象编程，POP:面向过程编程，还有函数式编程等等。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-8-异常处理知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-8-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-8-异常处理知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:52.345Z</updated>
    
    <content type="html"><![CDATA[<p>###SpringBoot中对异常的统一处理<br>异常处理也可以说成是一种数据传输方式，简单来讲，可以在Services中抛出异常信息，在controller中接收异常信息，然后就可以返回到页面显示了。<br><a id="more"></a></p><p>####异常处理实例<br>如果我们需要获取用户的年龄，并根据年龄进行判断，并作出不同的响应。</p><p>#####1.首先我们会定义返回结果数据的通用类，如下：</p><pre><code>public class Msg {    //状态码100-成功，200-失败    private int code;    //提示信息    private String msg;    //具体提示消息    private String message;    //用户要返回给浏览器的数据    private Map&lt;String, Object&gt; extend = new HashMap&lt;String, Object&gt;();    public static Msg success(String message){        Msg result = new Msg();        result.setCode(100);        result.setMsg(&quot;处理成功&quot;);        return result;    }    public static Msg fail(String message){        Msg result = new Msg();        result.setCode(200);        result.setMsg(&quot;处理失败&quot;);        result.setMessage(message);        return result;    }    public Msg add(String key,Object value){        this.getExtend().put(key, value);        return this;    }    public int getCode() {        return code;    }    public void setCode(int code) {        this.code = code;    }    public String getMsg() {        return msg;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    public void setMsg(String msg) {        this.msg = msg;    }    public Map&lt;String, Object&gt; getExtend() {        return extend;    }    public void setExtend(Map&lt;String, Object&gt; extend) {        this.extend = extend;    }}</code></pre><p>#####2.修改Controller中的添加一个用户的方法</p><pre><code>@PostMapping(value = &quot;/users&quot;)public Msg addUser(@Valid User user, BindingResult bindingResult){    if(bindingResult.hasErrors()){        return Msg.fail(bindingResult.getFieldError().getDefaultMessage());    }    user.setUserName(user.getUserName());    user.setAge(user.getAge());    return Msg.success().add(&quot;user&quot;,userRepository.save(user));}</code></pre><p>#####3.测试<br>我们先测试失败的时候，我们开始做了一个年龄age的检验，不满足校验就会报错，如下：</p><p><img src="https://i.imgur.com/X2Au6AA.png" alt></p><p>我们再来测试成功的时候，如下：</p><p><img src="https://i.imgur.com/0T8pDcc.png" alt><br>可以看出我们写的通用的返回类，返回给客户端的数据格式是一致的。上面仅仅是测试一下我们写的通用返回类，下面我们将继续完成对用户年龄的判断。</p><p>#####4.Services中添加方法<br>    public void getAge(Integer id){<br>        User user = userRepository.findOne(id);<br>        Integer age = user.getAge();<br>        if(age &lt; 20){<br>            //返回你还在上大学吧<br>        }else if(age &gt; 20 &amp;&amp; age &lt; 30){<br>            //返回你刚工作不久吧<br>        }<br>    }</p><p>#####5.userController中根据年龄获取用户<br>    @GetMapping(value = “users/getAge/{id}”)<br>    public void getAge(@PathVariable(“id”) Integer id){<br>        userService.getAge(id);<br>    }<br>但是，在controller中怎么获取Services中的返回的值，可能有的或说将Services的返回值改为String，如果我们要做其他操作，要返回一个对象或者其他呢，当然还有很多方式可以实现，但是随着业务的复杂，我们最好的使用统一异常的方式较为好些。</p><p>#####6.修改Services中的getAge方法</p><pre><code>public void getAge(Integer id) throws Exception{    User user = userRepository.findOne(id);    Integer age = user.getAge();    if(age &lt; 20){        //返回你还在上大学吧        throw new Exception(&quot;你还在上大学吧!!!&quot;);    }else if(age &gt; 20 &amp;&amp; age &lt; 30){        //返回你刚工作不久吧        throw new Exception(&quot;你刚工作不久吧!!!&quot;);    }}</code></pre><p>#####7.增加一个统一异常处理类</p><pre><code>import com.study.springbootdemo.domain.Msg;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;@ControllerAdvicepublic class ExceptionHandle {    //使用注解说明要捕获哪一个异常类,Exception是我们抛出异常使用的类    @ExceptionHandler(value = Exception.class)    @ResponseBody    public Msg handle(Exception e){        return Msg.fail(e.getMessage());    }}</code></pre><p>#####8.测试<br>首先先看我数据库中表的信息<br><img src="https://i.imgur.com/UBokLLn.png" alt><br>测试年龄小于20d的异常捕获和返回<br><img src="https://i.imgur.com/i0mzGg7.png" alt><br>测试年龄大于20小于30的异常捕获和返回<br><img src="https://i.imgur.com/pEFhkg9.png" alt></p><p>#####9.自定义异常类<br>使用Exception异常类只能抛出一个异常信息，throw new Exception(“你还在上大学吧!!!”);，如果我们要抛出其他的信息就要自定义异常类。</p><pre><code>public class UserException extends RuntimeException{    private String mes;    public UserException(String msg,String message){        super(message);        this.mes = msg;    }    public String getMes() {        return mes;    }    public void setMes(String mes) {        this.mes = mes;    }}</code></pre><p>#####10.修改Services类，抛出自定义异常类</p><pre><code>public void getAge(Integer id) throws Exception{    User user = userRepository.findOne(id);    Integer age = user.getAge();    if(age &lt; 20){        //返回你还在上大学吧        throw new UserException(&quot;年龄小于20的异常&quot;,&quot;你还在上大学吧!!!&quot;);    }else if(age &gt; 20 &amp;&amp; age &lt; 30){        //返回你刚工作不久吧        throw new UserException(&quot;年龄大于20且小于30的异常&quot;,&quot;你刚工作不久吧!!!&quot;);    }}</code></pre><p>#####11.异常捕获类</p><pre><code>@ControllerAdvicepublic class ExceptionHandle {    //使用注解说明要捕获哪一个异常类,Exception是我们抛出异常使用的类    @ExceptionHandler(value = Exception.class)    @ResponseBody    public Msg handle(Exception e){        if(e instanceof UserException){            UserException userException = (UserException) e;            userException.getMes();//自定义异常的第一个信息            userException.getMessage();//自定义异常的第二个信息            return Msg.fail(userException.getMes());        }        return Msg.fail(e.getMessage());    }}</code></pre><p>#####12优化Services<br>如果有很多的异常信息在各个类中抛出，修改和维护就特别困难，所以我们使用枚举来统一管理，新建一个枚举</p><pre><code>public enum ResultEnum {    ERROR_ONE(&quot;101&quot;,&quot;你还在上大学吧!!!&quot;),    ERRON_TWO(&quot;102&quot;,&quot;你刚工作不久吧!!!&quot;)    ;    private String mes;    private String message;    public String getMes() {        return mes;    }    ResultEnum(String msg,String message){        this.mes = msg;        this.message = message;    }    public String getMessage() {        return message;    }}</code></pre><p>然后修改我们自定义异常类</p><pre><code>public class UserException extends RuntimeException{    private String mes;    public UserException(ResultEnum resultEnum){        super(resultEnum.getMessage());        this.mes = mes;    }    public String getMes() {        return mes;    }    public void setMes(String mes) {        this.mes = mes;    }}</code></pre><p>修改我们的Services</p><pre><code>public void getAge(Integer id) throws Exception{    User user = userRepository.findOne(id);    Integer age = user.getAge();    if(age &lt; 20){        //返回你还在上大学吧        throw new UserException(ResultEnum.ERROR_ONE);    }else if(age &gt; 20 &amp;&amp; age &lt; 30){        //返回你刚工作不久吧        throw new UserException(ResultEnum.ERRON_TWO);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###SpringBoot中对异常的统一处理&lt;br&gt;异常处理也可以说成是一种数据传输方式，简单来讲，可以在Services中抛出异常信息，在controller中接收异常信息，然后就可以返回到页面显示了。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-5-事务管理知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-5-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-5-事务管理知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:37.952Z</updated>
    
    <content type="html"><![CDATA[<p>####事务管理<br>事务就是多条操作同时成功或者失败。例如同时新增两个用户，同时插入成功才插入到数据库表中，否则不插入。<br><a id="more"></a></p><p>####1.新增了一个Services类，如下所示：</p><pre><code>@Servicepublic class UserService {    @Autowired    private UserRepository userRepository;    @Transactional    public void insertUserTwo(){        User userA = new User();        userA.setUserName(&quot;B&quot;);        userA.setAge(52);        userRepository.save(userA);        User userB = new User();        userB.setUserName(&quot;陈七&quot;);        userB.setAge(25);        userRepository.save(userB);    }}</code></pre><p>说明:为了让测试方便，也就是模拟第二次插入会失败，我们将数据库表中的user_name字段的大小设置为1个字节，那么第一次插入就会成功，第二次插入就会报错，</p><p>####2.控制类中的方法如下所示：</p><pre><code>@PostMapping(value = &quot;/users/two&quot;)public void addTwoUser(){    userService.insertUserTwo();}</code></pre><p>这个时候即使第一条数据可以插入成功，也不会被插入进数据库表中，这就是 @Transactional的事务管理。</p><p>####总结<br>SpringBoot的基础知识包括了如下部分</p><ol><li>开发环境的安转和配置</li><li>简单的介绍了SpringBoot的配置文件中的</li><li>Controller的使用</li><li>数据库的基本使用的事务管理</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####事务管理&lt;br&gt;事务就是多条操作同时成功或者失败。例如同时新增两个用户，同时插入成功才插入到数据库表中，否则不插入。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-6-表单验证知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-6-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-6-表单验证知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:43.119Z</updated>
    
    <content type="html"><![CDATA[<p>下面是接着基础知识的代码整理后，如下所示：<br><img src="https://i.imgur.com/GkfsJ8V.png" alt><br><a id="more"></a><br>在前面的学习中，我们写了一个插入用户的方法，如下：</p><pre><code>@PostMapping(value = &quot;/users&quot;)public User addUser(@RequestParam(&quot;userName&quot;)String userName,@RequestParam(&quot;age&quot;)Integer age){    User user = new User();    user.setUserName(userName);    user.setAge(15);    return userRepository.save(user);}</code></pre><p>从上述代码中，我们可以看出随着用户的属性增多时，代码量就会变得很多，我们可以做如下的修改：</p><pre><code>@PostMapping(value = &quot;/users&quot;)public User addUser(User user){    user.setUserName(user.getUserName());    user.setAge(user.getAge());    return userRepository.save(user);}</code></pre><p>当我们进行表单验证时，使用注解的方式在实体类中，例如年龄必须大于18岁，如下：</p><pre><code>@Min(value = 18,message = &quot;未成年人禁止注册&quot;)private Integer age;</code></pre><p>控制类中的方法修改如下：</p><pre><code>@PostMapping(value = &quot;/users&quot;)public User addUser(@Valid User user, BindingResult bindingResult){    if(bindingResult.hasErrors()){        System.out.print(bindingResult.getFieldError().getDefaultMessage());        return null;    }    user.setUserName(user.getUserName());    user.setAge(user.getAge());    return userRepository.save(user);}</code></pre><p>说明：</p><ol><li>使用了@Min(value = 18,message = “未成年人禁止注册”)进行表单字段校验</li><li>使用@Valid注解表示校验user这个对象</li><li>校验结果存在在BindingResult bindingResult这个对象中</li></ol><p>####SpringBoot采用的是Hibernate-validator校验规则，常用的校验规则如下所示：</p><ol><li>@AssertTrue 用于Boolean字段，该字段只能为true</li><li>@AssertFalse 用于Boolean字段，该字段只能为false</li><li>@CreditCardNumber 对信用卡进行一个大致的验证</li><li>@DecimalMax(“5”) 只能小于或等于该值</li><li>@DecimalMin(“48”)只能大于和等于该值</li><li>@Digits(integer = 2,fraction = 20) 检查是否是一种数字的整数，分数，小数位数的数字</li><li>@Email 对邮箱进行校验</li><li>@Future 检查该字段的日期是否是一个将来的日期</li><li>@Length(min = 12,max = 45) 检查所属字段的长度是否在min和max之间，只能用于字符串</li><li>@Max(value = 15) 该字段的值只能小于或者等于该值</li><li>@Min(value = 1) 该字段的值只能大于或者等于该值</li><li>@NotNull 不能为null </li><li>@NotBlank 不能为空，检查的时候会将空格忽略</li><li>@NotEmpty 不能为空，这里指的是空字符串</li><li>@Null 检查该字段是否为空</li><li>@Past 检查该字段的是日期在过去</li><li>@Size(min = 12,max = 51) 检查该字段的size是否在min和max之间，包括字符串，数组，集合，Map等</li><li>@URL(protocol = “1”,host = “”,port = 51) 检查是否是一个有效的URL</li><li>@Valid 该注解只能用于字段为一个包含其他对象的集合或map或数组的字段。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是接着基础知识的代码整理后，如下所示：&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/GkfsJ8V.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-3-控制类知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-3-%E6%8E%A7%E5%88%B6%E7%B1%BB%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-3-控制类知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:28.017Z</updated>
    
    <content type="html"><![CDATA[<p>####下面将简单介绍一下controller类的相关用法<br>在上一篇博客中，我们也使用的Controller相关的注解，下面我们来简单的总结一下：</p><ol><li>@RestController处理Http请求，返回JSON格式的数据。</li><li><p>@RequestMapping(value = “/hello”,method = RequestMethod.GET)配置URL映射</p><a id="more"></a><p>如果使用多个URL访问同一个的方法，可以将URL映射配置为一个集合，如下所示：</p><p> @RestController<br> public class HelloSpringBoot {</p><pre><code>@Autowiredprivate UserProperties userProperties;@RequestMapping(value = {&quot;/hello&quot;,&quot;/hi&quot;},method = RequestMethod.GET)public String hello(){    return userProperties.getCupSize();}</code></pre><p> }<br>RequestMapping类注解如下：</p><p> @RestController<br> @RequestMapping(“demo”)<br> public class HelloSpringBoot {</p><pre><code>@Autowiredprivate UserProperties userProperties;@RequestMapping(value = {&quot;/hello&quot;,&quot;/hi&quot;},method = RequestMethod.GET)public String hello(){    return userProperties.getCupSize();}</code></pre><p> }<br>访问链接为<a href="http://localhost:8082/gire/demo/hello" target="_blank" rel="noopener">http://localhost:8082/gire/demo/hello</a><br>###如何获取参数</p></li><li>@PathVariable获取URL中的数据</li><li>@RequestParam获取请求参数的值</li><li>@GetMapping组合注解</li></ol><p>####@PathVariable注解使用</p><pre><code>@RestController@RequestMapping(&quot;demo&quot;)public class HelloSpringBoot {    @Autowired    private UserProperties userProperties;    @RequestMapping( value = &quot;/hello/{id}&quot;,method = RequestMethod.GET)    public String hello(@PathVariable(&quot;id&quot;) Integer id){        return &quot;id:&quot;+id;    }}</code></pre><p>访问链接如下：<a href="http://localhost:8082/gire/demo/hello/5，" target="_blank" rel="noopener">http://localhost:8082/gire/demo/hello/5，</a></p><p>####@RequestParam注解使用<br>如果使用传统的传参数<a href="http://localhost:8082/gire/demo/hello?id=5那么获取方式如下所示：" target="_blank" rel="noopener">http://localhost:8082/gire/demo/hello?id=5那么获取方式如下所示：</a></p><pre><code>@RestController@RequestMapping(&quot;demo&quot;)public class HelloSpringBoot {    @Autowired    private UserProperties userProperties;    @RequestMapping( value = &quot;/hello&quot;,method = RequestMethod.GET)    public String hello(@RequestParam(&quot;id&quot;) Integer id){        return &quot;id:&quot;+id;    }}</code></pre><p>也可以使用默认参数值，和要求是否必传，如下所示：</p><pre><code>@RestController@RequestMapping(&quot;demo&quot;)public class HelloSpringBoot {    @Autowired    private UserProperties userProperties;    @RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)    public String hello(@RequestParam(value = &quot;id&quot;,required = false,defaultValue = &quot;0&quot;) Integer id){        return &quot;id:&quot;+id;    }}</code></pre><p>其中required要求是否必传，defaultValue是默认值，如果不传id则显示默认值。</p><p>####组合注解<br>@RequestMapping(value = “/hello”,method = RequestMethod.GET)这个注解可以使用 @GetMapping(value = “/hello”)这个组合注解来替代，当然 @PutMapping、 @DeleteMapping等形式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####下面将简单介绍一下controller类的相关用法&lt;br&gt;在上一篇博客中，我们也使用的Controller相关的注解，下面我们来简单的总结一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@RestController处理Http请求，返回JSON格式的数据。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@RequestMapping(value = “/hello”,method = RequestMethod.GET)配置URL映射&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-4-数据库知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-4-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-4-数据库知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:32.744Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下面学习的是数据库相关知识"><a href="#下面学习的是数据库相关知识" class="headerlink" title="下面学习的是数据库相关知识"></a>下面学习的是数据库相关知识</h4><p>数据库使用的是MySQL，持久化技术使用的就是spring-data-jpa,RESTFul API如下<br><a id="more"></a><br><img src="https://i.imgur.com/x2JhG2P.png" alt></p><h4 id="1-pom文件中添加依赖"><a href="#1-pom文件中添加依赖" class="headerlink" title="1.pom文件中添加依赖"></a>1.pom文件中添加依赖</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h4 id="2-application-yml文件中配置数据库信息和jpa"><a href="#2-application-yml文件中配置数据库信息和jpa" class="headerlink" title="2.application.yml文件中配置数据库信息和jpa"></a>2.application.yml文件中配置数据库信息和jpa</h4><pre><code>spring:  profiles:    active: prod  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://127.0.0.1:3306/dbspringboot    username: root    password: 123456  jpa:    hibernate:      ddl-auto: create    show-sql: true</code></pre><p>其中的 ddl-auto: create表示每次都会删除原先存在的表，就是说如果表中存在数据，运行程序数据就不存在了。<br>也可以是 update：会创建表，如果表中有数据，不会删除表。</p><p>####3.创建一个实体类User，如下所示</p><pre><code>@Entitypublic class User {    @Id    @GeneratedValue    private Integer id;    private String userName;    private Integer age;    public User(){    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getUserName() {        return userName;    }    public void setUserName(String userName) {        this.userName = userName;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }}</code></pre><p>当我们再次启动程序的时候时候，dbspringboot数据库中就会多一个user表，其中表字段就是实体类所对应的字段，这是jpa相关的知识，具体将在以后仔细学习和记录。</p><p>####4.创建UserController</p><pre><code>@RestControllerpublic class UserController {    @Autowired    private UserRepository userRepository;    @GetMapping(value = &quot;/users&quot;)    public List&lt;User&gt; userList(){        return userRepository.findAll();    }}</code></pre><p>####5.UserRepository接口的代码如下</p><pre><code>public interface UserRepository extends JpaRepository&lt;User,Integer&gt; {}</code></pre><p>####6.访问<br>使用<a href="http://localhost:8082/gire/users访问，如下：" target="_blank" rel="noopener">http://localhost:8082/gire/users访问，如下：</a><br><img src="https://i.imgur.com/nD51Mz6.png" alt></p><p>####7.restful风格的完整代码如下：</p><pre><code>@RestControllerpublic class UserController {    @Autowired    private UserRepository userRepository;    /**     * 查询用户列表     * @return     */    @GetMapping(value = &quot;/users&quot;)    public List&lt;User&gt; userList(){        return userRepository.findAll();    }    /**     * 添加一个用户     * @param userName     * @param age     * @return     */    @PostMapping(value = &quot;/users&quot;)    public User addUser(@RequestParam(&quot;userName&quot;)String userName,@RequestParam(&quot;age&quot;)Integer age){        User user = new User();        user.setUserName(userName);        user.setAge(15);        return userRepository.save(user);    }    /**     * 根据id查询用户     * @return     */    @GetMapping(value = &quot;/users/{id}&quot;)    public User getUserById(@PathVariable(&quot;id&quot;) Integer id){        return userRepository.findOne(id);    }    /**     * 根基id修改用户     * @param id     * @param userName     * @param age     * @return     */    @PutMapping(value = &quot;/users/{id}&quot;)    public User updateUserById(@PathVariable(&quot;id&quot;) Integer id,@RequestParam(&quot;userName&quot;)String userName,@RequestParam(&quot;age&quot;)Integer age){        User user = new User();        user.setId(id);        user.setAge(age);        user.setUserName(userName);        return userRepository.save(user);    }    /**     * 根据id删除用户     * @param id     */    @DeleteMapping(value = &quot;/users{id}&quot;)    public void deleteUserById(@PathVariable(&quot;id&quot;) Integer id){        userRepository.delete(id);    }    @GetMapping(value = &quot;users/age/{age}&quot;)    public List&lt;User&gt; listUserByAge(@PathVariable(&quot;age&quot;) Integer age){        return userRepository.findByAge(age);    }}</code></pre><p>上述代码中我们也扩展了使用年龄来查询用户，在UserRepository接口中我们扩展了这个方法如下所示：</p><pre><code>//通过年龄查询，方法名有规定public List&lt;User&gt; findByAge(Integer age);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;下面学习的是数据库相关知识&quot;&gt;&lt;a href=&quot;#下面学习的是数据库相关知识&quot; class=&quot;headerlink&quot; title=&quot;下面学习的是数据库相关知识&quot;&gt;&lt;/a&gt;下面学习的是数据库相关知识&lt;/h4&gt;&lt;p&gt;数据库使用的是MySQL，持久化技术使用的就是spring-data-jpa,RESTFul API如下&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-2-配置文件知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-2-配置文件知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:23.500Z</updated>
    
    <content type="html"><![CDATA[<p>####属性配置说明<br>在SpringBoot项目中，属性配置在resource目录下的application.properties中配置，接着我们第一次创建的那个项目说明，如下，做了一些简单的配置后，<br><a id="more"></a><br><br><br><img src="https://i.imgur.com/Ea6jseT.png" alt><br><br><br>再启动项目后使用<a href="http://localhost:8080/hello就不能访问项目了，使用http://localhost:8081/gire/hello访问才能正常访问项目，" target="_blank" rel="noopener">http://localhost:8080/hello就不能访问项目了，使用http://localhost:8081/gire/hello访问才能正常访问项目，</a><br>在SpringBoot项目中默认使用application.properties文件来配置项目的一些信息，当然我们也可使用yml文件来配置，具体如下所示：<br><br><br><img src="https://i.imgur.com/lgQLENn.png" alt><br><br><br>注意：yml语法是相同的就不同重复书写，同时port: 8082之间必须存在空格。当然yml和properties只能存放一个。</p><p>####yml文件配置的属性值如何在程序中得到，下面来看一个小例子。</p><p>#####第一步：配置文件中配置一些基本的属性和属性值，如下所示：<br><br><br><img src="https://i.imgur.com/6xO8EDa.png" alt><br><br></p><p>#####第二步：在controller中获取配置文件中属性值的方法如下所示：<br><br><br><img src="https://i.imgur.com/cosAJPp.png" alt><br><br></p><p>#####写到这里都会想到如果有很多属性值，那岂不是要写很多的代码，我们可以做如下的改变，</p><p>#####首先是配置文件中加上前缀：<br><br><br><img src="https://i.imgur.com/O1VAi1f.png" alt><br><br></p><p>#####然后新建一个配置属性类，如下所示：<br><br><br><img src="https://i.imgur.com/pYhjSHM.png" alt><br><br></p><p>#####注意的是前缀和配置文件中的前缀保持一致，只用方法如下所示：<br><br><br><img src="https://i.imgur.com/KVGtqew.png" alt><br><br></p><p>####不同配置环境之间的切换使用问题</p><p>#####开发环境使用的配置文件和生产环境使用的配置文件，开发环境的配置文件如下所示：<br><br><br><img src="https://i.imgur.com/q6bX0UH.png" alt><br><br></p><p>#####生产环境的配置文件如下所示：<br><br><br><img src="https://i.imgur.com/nsjZ34x.png" alt><br><br></p><p>#####环境的切换配置文件如下所示：<br><br><br><img src="https://i.imgur.com/ZKsWi46.png" alt><br><br></p><p>####小结<br>使用到的注解如下：</p><ol><li>@Component组件标识，表示当前类可以被注入。</li><li>@ConfigurationProperties(prefix = “user”)配置文件标识</li><li>@Value(“${age}”)获取配置文件中的属性值</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####属性配置说明&lt;br&gt;在SpringBoot项目中，属性配置在resource目录下的application.properties中配置，接着我们第一次创建的那个项目说明，如下，做了一些简单的配置后，&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习-----SpringCloud（二）实践准备</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-----SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E8%B7%B5%E5%87%86%E5%A4%87/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习-----SpringCloud（二）实践准备/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:20:32.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud实践准备"><a href="#SpringCloud实践准备" class="headerlink" title="SpringCloud实践准备"></a>SpringCloud实践准备</h1><h2 id="项目技术版本"><a href="#项目技术版本" class="headerlink" title="项目技术版本"></a>项目技术版本</h2><p>SpringCloud版本：Dalston.SR1，SpringBoot版本：1.5.9</p><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>项目是使用SpringCloud将四个工程进行整合，microservicecloud整体父工程Project，microservicecloud-api公共子模块Module，microservicecloud-provider-dept-8001部门微服务提供者Module，microservicecloud-consumer-dept-80部门微服务消费者Module。<br><a id="more"></a></p><h2 id="1-父类项目创建"><a href="#1-父类项目创建" class="headerlink" title="1.父类项目创建"></a>1.父类项目创建</h2><p>在逻辑视图中选择new-Maven Project-勾上创建简单项目-选择pom方式</p><h3 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-公共组件项目创建"><a href="#2-公共组件项目创建" class="headerlink" title="2.公共组件项目创建"></a>2.公共组件项目创建</h2><p>在父项目上创建microservicecloud-api项目，注意是在microservicecloud上new一个maven module，packaging选择jar</p><h3 id="POM-xml文件"><a href="#POM-xml文件" class="headerlink" title="POM.xml文件"></a>POM.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="comment">&lt;!-- 当前Module需要用到的jar包，按自己需求添加，如果父类已经包含了，可以不用写版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Dept实体类"><a href="#Dept实体类" class="headerlink" title="Dept实体类"></a>Dept实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long deptno; <span class="comment">// 主键</span></span><br><span class="line"><span class="keyword">private</span> String dname; <span class="comment">// 部门名称、</span></span><br><span class="line"><span class="keyword">private</span> String db_source; <span class="comment">// 来自那个数据库，因为微服务可以一个服务对应一个数据库，同一个信息被存储到不同的数据库</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Long deptno, String dname, String db_source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line"><span class="keyword">this</span>.dname = dname;</span><br><span class="line"><span class="keyword">this</span>.db_source = db_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Long deptno)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dname = dname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDb_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> db_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDb_source</span><span class="params">(String db_source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.db_source = db_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Dept [deptno="</span> + deptno + <span class="string">", dname="</span> + dname + <span class="string">", db_source="</span> + db_source + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们每次都需要创建一个实体类的getter，setter，toString和构造器等方法时，如果增加一个字段就要重新生成方法，为了简化这种重复的操作，我们在前面的pom中引入了lombok，同样的实体类，使用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long deptno; <span class="comment">// 主键</span></span><br><span class="line"><span class="keyword">private</span> String dname; <span class="comment">// 部门名称</span></span><br><span class="line">    <span class="comment">// 来自那个数据库，因为微服务可以一个服务对应一个数据库，同一个信息被存储到不同的数据库</span></span><br><span class="line"><span class="keyword">private</span> String db_source; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lombok安装方法"><a href="#lombok安装方法" class="headerlink" title="lombok安装方法"></a>lombok安装方法</h4><p>拷贝lombok-1.16.18.jar到Eclipse目录下，执行java -jar D:\javasoft\eclipse-jee-neon-3-win32-x86_64\eclipse\ombok-1.16.18.jar，然后，弹框中选择Eclipse安装目录，选择install即可。</p><h4 id="lombok注解使用"><a href="#lombok注解使用" class="headerlink" title="lombok注解使用"></a>lombok注解使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual</span><br><span class="line">@Setter：注解在属性上；为属性提供 setting 方法</span><br><span class="line">@Getter：注解在属性上；为属性提供 getting 方法</span><br><span class="line">@Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象</span><br><span class="line">@NoArgsConstructor：注解在类上；为类提供一个无参的构造方法</span><br><span class="line">@AllArgsConstructor：注解在类上；为类提供一个全参的构造方法</span><br><span class="line">@Accessors(chain=true)：可以使用链式写法</span><br></pre></td></tr></table></figure><h4 id="lombok测试"><a href="#lombok测试" class="headerlink" title="lombok测试"></a>lombok测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain=<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long deptno; <span class="comment">// 主键</span></span><br><span class="line"><span class="keyword">private</span> String dname; <span class="comment">// 部门名称、</span></span><br><span class="line"><span class="keyword">private</span> String db_source; <span class="comment">// 来自那个数据库，因为微服务可以一个服务对应一个数据库，同一个信息被存储到不同的数据库</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dept dept = <span class="keyword">new</span> Dept();</span><br><span class="line">dept.setDeptno(<span class="number">12L</span>).setDname(<span class="string">"开发部"</span>).setDb_source(<span class="string">"DB01"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意内容"><a href="#注意内容" class="headerlink" title="注意内容"></a>注意内容</h4><p>实体类必须实现Serializable接口</p><h3 id="打包使用"><a href="#打包使用" class="headerlink" title="打包使用"></a>打包使用</h3><p>公共组件模块写好后可以点击run as 选择maven clean ，然后在选择maven install。其他模块引用的方法如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-部门微服务提供者"><a href="#3-部门微服务提供者" class="headerlink" title="3.部门微服务提供者"></a>3.部门微服务提供者</h2><p>首先现在父类项目上new一个maven module,microservicecloud-provider-dept-8001修改pom.xml文件</p><h3 id="pom-xml文件-1"><a href="#pom-xml文件-1" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-provider-dept-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Dept部门Entity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- actuator监控信息完善 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将微服务provider侧注册进eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml文件"><a href="#application-yml文件" class="headerlink" title="application.yml文件"></a>application.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis.cfg.xml</span>        <span class="comment"># mybatis配置文件所在路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.luo.springcloud.entities</span>        <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"><span class="attr">  mapper-locations:</span></span><br><span class="line"><span class="attr">  - classpath:</span><span class="string">mybatis/mapper/**/*.xml</span>                       <span class="comment"># mapper映射文件</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">   application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservicecloud-dept</span> </span><br><span class="line"><span class="attr">   datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>              <span class="comment"># mysql驱动包</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/cloudDB01</span>              <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">1234</span></span><br><span class="line"><span class="attr">    dbcp2:</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span>                                           <span class="comment"># 数据库连接池的最小维持连接数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span>                                       <span class="comment"># 初始化连接数</span></span><br><span class="line"><span class="attr">      max-total:</span> <span class="number">5</span>                                          <span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">      max-wait-millis:</span> <span class="number">200</span>                                  <span class="comment"># 等待连接获取的最大超时时间</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span> <span class="comment">#客户端注册进eureka服务列表内</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><h3 id="mybatis下mybatis-cfg-xml"><a href="#mybatis下mybatis-cfg-xml" class="headerlink" title="mybatis下mybatis.cfg.xml"></a>mybatis下mybatis.cfg.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span><span class="comment">&lt;!-- 二级缓存开启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> cloudDB01 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> cloudDB01 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> UTF8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> cloudDB01 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept (</span><br><span class="line">  deptno <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  dname <span class="built_in">VARCHAR</span> (<span class="number">60</span>),</span><br><span class="line">  db_source <span class="built_in">VARCHAR</span> (<span class="number">60</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'开发部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'人事部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'财务部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'市场部'</span>,<span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname,db_source) <span class="keyword">VALUES</span>(<span class="string">'运维部'</span>,<span class="keyword">DATABASE</span>());</span><br></pre></td></tr></table></figure><h3 id="dao接口"><a href="#dao接口" class="headerlink" title="dao接口"></a>dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DeptMapper-xml"><a href="#DeptMapper-xml" class="headerlink" title="DeptMapper.xml"></a>DeptMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.luo.springcloud.dao.DeptDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"Dept"</span> <span class="attr">parameterType</span>=<span class="string">"Long"</span>&gt;</span></span><br><span class="line">select deptno,dname,db_source from dept where deptno=#&#123;deptno&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"Dept"</span>&gt;</span></span><br><span class="line">select deptno,dname,db_source from dept;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addDept"</span> <span class="attr">parameterType</span>=<span class="string">"Dept"</span>&gt;</span></span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(#&#123;dname&#125;,DATABASE());</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DeptService"><a href="#DeptService" class="headerlink" title="DeptService"></a>DeptService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(Long id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DeptServiceImpl"><a href="#DeptServiceImpl" class="headerlink" title="DeptServiceImpl"></a>DeptServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DeptDao dao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dao.addDept(dept);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dao.findById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dao.findAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DeptController"><a href="#DeptController" class="headerlink" title="DeptController"></a>DeptController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DeptService service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/dept/add"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(@RequestBody Dept dept)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> service.add(dept);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"dept/get/&#123;id&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> service.get(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"dept/list"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> service.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建主启动类DeptProvider8001-App"><a href="#创建主启动类DeptProvider8001-App" class="headerlink" title="创建主启动类DeptProvider8001_App"></a>创建主启动类DeptProvider8001_App</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider8001_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DeptProvider8001_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>输入<a href="http://localhost:8001/dept/list以JSON的方式返回数据" target="_blank" rel="noopener">http://localhost:8001/dept/list以JSON的方式返回数据</a></p><h2 id="4-部门微服务消费者"><a href="#4-部门微服务消费者" class="headerlink" title="4.部门微服务消费者"></a>4.部门微服务消费者</h2><p>首先现在父类项目上new一个maven module,microservicecloud-consumer-dept-80修改pom.xml文件</p><h3 id="POM-xml文件-1"><a href="#POM-xml文件-1" class="headerlink" title="POM.xml文件"></a>POM.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-consumer-dept-80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>部门微服务消费者<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 自己定义的api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luo.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservicecloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ribbon相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改后立即生效，热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml文件-1"><a href="#application-yml文件-1" class="headerlink" title="application.yml文件"></a>application.yml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="ConfigBean注解类"><a href="#ConfigBean注解类" class="headerlink" title="ConfigBean注解类"></a>ConfigBean注解类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">geRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h4><p>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单高效便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具类集，使用方法如下</p><p>（url,requestMap,ResponseBean.class）三个参数分别代表Rest请求地址，请求参数，HTTP响应转换被转换的对象类型</p><h3 id="DeptController-Consumer"><a href="#DeptController-Consumer" class="headerlink" title="DeptController_Consumer"></a>DeptController_Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController_Consumer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">"http://localhost:8001"</span>;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/consumer/dept/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX+<span class="string">"/dept/add"</span>, dept, Boolean.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/consumer/dept/get/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">"/dept/get/"</span>+id, Dept.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/consumer/dept/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX+<span class="string">"/dept/list/"</span>, Dept.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DeptConsumer80-App主类"><a href="#DeptConsumer80-App主类" class="headerlink" title="DeptConsumer80_App主类"></a>DeptConsumer80_App主类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80_App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DeptConsumer80_App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p><a href="http://localhost/consumer/dept/list" target="_blank" rel="noopener">http://localhost/consumer/dept/list</a></p><p><a href="http://localhost/consumer/dept/get/2" target="_blank" rel="noopener">http://localhost/consumer/dept/get/2</a></p><p><a href="http://localhost/consumer/dept/add?dname=AI" target="_blank" rel="noopener">http://localhost/consumer/dept/add?dname=AI</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud实践准备&quot;&gt;&lt;a href=&quot;#SpringCloud实践准备&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud实践准备&quot;&gt;&lt;/a&gt;SpringCloud实践准备&lt;/h1&gt;&lt;h2 id=&quot;项目技术版本&quot;&gt;&lt;a href=&quot;#项目技术版本&quot; class=&quot;headerlink&quot; title=&quot;项目技术版本&quot;&gt;&lt;/a&gt;项目技术版本&lt;/h2&gt;&lt;p&gt;SpringCloud版本：Dalston.SR1，SpringBoot版本：1.5.9&lt;/p&gt;
&lt;h2 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h2&gt;&lt;p&gt;项目是使用SpringCloud将四个工程进行整合，microservicecloud整体父工程Project，microservicecloud-api公共子模块Module，microservicecloud-provider-dept-8001部门微服务提供者Module，microservicecloud-consumer-dept-80部门微服务消费者Module。&lt;br&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot-1-项目初始化知识</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot-1-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9F%A5%E8%AF%86/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot-1-项目初始化知识/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:18.706Z</updated>
    
    <content type="html"><![CDATA[<p>####前提准备</p><ol><li>安装和配置Java1.8相关环境。</li><li>安装和配置Maven，并修改为国内镜像</li><li>官网下载IDEA旗舰版，并安装。</li><li>IDEA配置Maven，配置JDK.</li><li>修改IDEA常用的设置，例如字体，提示等等<a id="more"></a>####第一个SpringBoot项目<br>#####第一步：打开IDEA，选择创建新项目，如下所示：</li></ol><p><img src="https://i.imgur.com/L8fT3PE.png" alt></p><p>#####第二步：点击Next，选择对应的Java版本和项目名，包名，注意项目名只能为小写，如下所示：</p><p><img src="https://i.imgur.com/RRgjRuV.png" alt></p><p>#####第三步：我们只选web即可，如下所示：</p><p><img src="https://i.imgur.com/0Tibj1I.png" alt><br>第一个SpringBoot项目就创建成功了，项目目录结构如下：</p><p><img src="https://i.imgur.com/vvz3niH.png" alt></p><p>#####第四步：创建一个HelloSpringBoot的Controller类，如下所示：</p><p><img src="https://i.imgur.com/Qvu5hL9.png" alt><br>这个类的作用就时返回一个字符串，</p><p>#####第五步：在程序的主入口处启动该程序，SpringbootdemoApplication启动，浏览器访问如下所示：</p><p><img src="https://i.imgur.com/bt7qr0g.png" alt></p><p>#####至此：第一个项目就完成了，无情的战争财刚刚开始，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####前提准备&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装和配置Java1.8相关环境。&lt;/li&gt;
&lt;li&gt;安装和配置Maven，并修改为国内镜像&lt;/li&gt;
&lt;li&gt;官网下载IDEA旗舰版，并安装。&lt;/li&gt;
&lt;li&gt;IDEA配置Maven，配置JDK.&lt;/li&gt;
&lt;li&gt;修改IDEA常用的设置，例如字体，提示等等
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot高级（一）JSR107缓存</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89JSR107%E7%BC%93%E5%AD%98/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot高级（一）JSR107缓存/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:10.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot与缓存"><a href="#SpringBoot与缓存" class="headerlink" title="SpringBoot与缓存"></a>SpringBoot与缓存</h1><h2 id="JSR107"><a href="#JSR107" class="headerlink" title="JSR107"></a>JSR107</h2><a id="more"></a><p>Java Caching定义了5个核心接口，分别是CachingProvider, CacheManager, Cache, Entry和Expiry。</p><ul><li>CachingProvider定义了创建、配置、获取、管理和控制多个CacheManager。一个应用可以在运行期访问多个CachingProvider。</li><li>CacheManager定义了创建、配置、获取、管理和控制多个唯一命名的Cache，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</li><li>Cache是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅被一个CacheManager所拥有。</li><li>Entry是一个存储在Cache中的key-value对。</li><li>Expiry每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。</li></ul><p><strong>使用JSR107需要导入如下包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cache-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring缓存抽象"><a href="#Spring缓存抽象" class="headerlink" title="Spring缓存抽象"></a>Spring缓存抽象</h2><p>Spring从3.1开始定义了org.springframework.cache.Cache和org.springframework.cache.CacheManager接口来统一不同的缓存技术；并支持使用JCache（JSR-107）注解简化我们开发；</p><ul><li>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合；</li><li>Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache , ConcurrentMapCache等；</li><li>每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</li><li>使用Spring缓存抽象时我们需要关注以下两点；<ul><li>确定方法需要被缓存以及他们的缓存策略</li><li>从缓存中读取之前缓存存储的数据</li></ul></li></ul><h2 id="重要概念和缓存注解"><a href="#重要概念和缓存注解" class="headerlink" title="重要概念和缓存注解"></a>重要概念和缓存注解</h2><table><thead><tr><th>Cache</th><th>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</th></tr></thead><tbody><tr><td>CacheManager</td><td>缓存管理器，管理各种缓存（Cache）组件</td></tr><tr><td>@Cacheable</td><td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td></tr><tr><td>@CacheEvict</td><td>清空缓存</td></tr><tr><td>@CachePut</td><td>保证方法被调用，又希望结果被缓存</td></tr><tr><td>@EnableCaching</td><td>开启基于注解的缓存</td></tr><tr><td>keyGenerator</td><td>缓存数据时key生成策略</td></tr><tr><td>serialize</td><td>缓存数据时value序列化策略</td></tr></tbody></table><p><strong>简要说明：</strong></p><ul><li>@Cacheable注解加载方法中，那么该方法第一次会查询数据库，然后就会吧数据放在缓存中，使用Cache 进行数据的读取等操作。</li><li>@CacheEvict删除缓存，例如根据id删除用户，那么也要删除缓存中的用户信息</li><li>@CachePut更新缓存，例如更新用户信息后，同时也要更新缓存中的用户信息</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot与缓存&quot;&gt;&lt;a href=&quot;#SpringBoot与缓存&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot与缓存&quot;&gt;&lt;/a&gt;SpringBoot与缓存&lt;/h1&gt;&lt;h2 id=&quot;JSR107&quot;&gt;&lt;a href=&quot;#JSR107&quot; class=&quot;headerlink&quot; title=&quot;JSR107&quot;&gt;&lt;/a&gt;JSR107&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot高级（三）缓存注解</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot高级（三）缓存注解/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:25:50.803Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注解@CachePut使用</strong></p><p>既调用方法，又更新缓存数据，当修改了数据库的某一个数据，同时更新缓存<br><a id="more"></a><br><strong>service层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(value = <span class="string">"emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeMapper.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Controller层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">update</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    Employee emp = employeeService.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> emp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试说明</strong></p><ul><li>先查询id为1的员工信息，第一次请求将查询数据库，然后放入缓存中</li><li>在执行更新id为1的员工信息，再查询id为1的员工信息，返回的是更新之前缓存中的员工信息</li><li>原因在于 @Cacheable中的key默认是参数，值是返回结果，查询缓存key是1，value是employee对象，更新方法中的@CachePut注解key是传入的employee对象，value是返回的employee对象，</li><li>更新之后查询应该返回的是更新的数据，也就是缓存中的数据没有更新，原因在于两次的key不一样导致，修改如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span> ,key = <span class="string">"#employee.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeMapper.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解@CacheEvict的使用</strong></p><p>注解@CacheEvict清除缓存，通过使用value，key属性清除指定缓存中指定key的缓存数据,有一个allEntries属性，默认是false，意思就是是否删除指定缓存中的所有key的缓存数据。beforeInvocation = false属性表示缓存的清除是否在方法执行之前执行，默认是在方法之后执行，如果出现异常就不会清除缓存，如果在方法之前执行，就是不管方法是否执行成功都会清除缓存数据</p><p><strong>services层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    employeeMapper.deleteEmpById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/delemp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    employeeService.deleteEmpById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Cacheable，@CachePut，@CacheEvict的区别</strong></p><ul><li>注解@Cacheable是先调用缓存中的数据，如果没有在调用@Cacheable注解的方法</li><li>注解@CachePut是先调用目标方法，然后再将目标方法的返回结果放入缓存数据中</li><li>注解@CacheEvict的执行先后可以谁用属性配置改变</li></ul><p><strong>注解@Caching复杂缓存配置的使用</strong></p><p><strong>Mapper层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from employee where lastName = #&#123;lastName&#125;"</span>)</span><br><span class="line"><span class="function">Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>service层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Caching</span>(</span><br><span class="line">     cacheable = &#123;</span><br><span class="line">         <span class="meta">@Cacheable</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#lastName"</span>)</span><br><span class="line">     &#125;,</span><br><span class="line">     put = &#123;</span><br><span class="line">         <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#result.id"</span>),</span><br><span class="line">         <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#result.email"</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> )</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">    Employee emp = employeeMapper.getEmpByLastName(lastName);</span><br><span class="line">    <span class="keyword">return</span> emp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述定义的复杂缓存规则简单讲就是使用名字查询后，缓存中有了key为id的缓存信息，key为email的缓存信息</p><p><strong>Controller层代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp/lastName/&#123;lastName&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(@PathVariable(<span class="string">"lastName"</span>)</span> String lastName)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employeeService.getEmpByLastName(lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解@CacheConfig的使用</strong></p><p>在前面中我们对每一个方法都写了@CacheEvict(value = “emp”,key = “#id”)中的value属性，指定缓存到哪里。我们可以使用@CacheConfig注解指明一个类的所有方法都缓存到哪里，用什么key等信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"emp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>缓存默认使用的ConcurrentMapCacheManager == ConcurrentMapCache，将数据保存在ConcurrentMap,但是在开发中我们经常使用的缓存中间件：redis，memcached.ehcahe等</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;注解@CachePut使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既调用方法，又更新缓存数据，当修改了数据库的某一个数据，同时更新缓存&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot高级（六）SpringBoot整合RabbitMQ</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot%E9%AB%98%E7%BA%A7%EF%BC%88%E5%85%AD%EF%BC%89SpringBoot%E6%95%B4%E5%90%88RabbitMQ/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot高级（六）SpringBoot整合RabbitMQ/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:25:45.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h2><ul><li>引入spring-boot-starter-amqp</li><li>application.yml配置</li><li><p>测试RabbitMQ</p><ul><li>AmqpAdmin：管理组件</li><li>RabbitTemplate：消息发送处理组件<a id="more"></a>整合前提是在Linux虚拟主机中的docker中安装rabbitmq镜像，并启动镜像。</li></ul></li><li><p>新建项目，加入RabbitMQ依赖，SpringBoot的自动配置RabbitAutoConfiguration，有自动配置连接工厂ConnectionFactory，在RabbitProperties中封装了RabbitMQ的配置</p></li><li>在Application.properties文件中配置RabbitMQ</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host=118.24.44.169  #配置虚拟主机的地址</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.activemq.password=guest</span><br></pre></td></tr></table></figure><ul><li>RabbitTemplate给RabbitMQ发送和接收消息</li><li>AmqpAdmin,是RabbitMQ中系统管理功能组件</li></ul><h3 id="测试使用RabbitTemplate发送消息"><a href="#测试使用RabbitTemplate发送消息" class="headerlink" title="测试使用RabbitTemplate发送消息"></a>测试使用RabbitTemplate发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单播模式发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//message需要自己构造一个，定义消息体内容和消息头</span></span><br><span class="line">    <span class="comment">//rabbitTemplate.send(exchange,routeKey,message);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//只需要传入要发送的对象，自动序列化发送给RabbitMQ</span></span><br><span class="line">    <span class="comment">//rabbitTemplate.convertAndSend(exchange,routeKey,object);</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"msg"</span>,<span class="string">"这是第一个消息"</span>);</span><br><span class="line">    map.put(<span class="string">"data"</span>, Arrays.asList(<span class="string">"hello"</span>,<span class="number">123</span>,<span class="keyword">true</span>));</span><br><span class="line">    <span class="comment">//对象默认序列化以后被发送出去</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"exchange.direct"</span>,<span class="string">"luo.news"</span>,map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收数据,如何将数据转为JSON数据格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object o = rabbitTemplate.receiveAndConvert(<span class="string">"luo.news"</span>);</span><br><span class="line">    System.out.println(o.getClass());</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何将数据转为JSON数据格式"><a href="#如何将数据转为JSON数据格式" class="headerlink" title="如何将数据转为JSON数据格式"></a>如何将数据转为JSON数据格式</h3><p><strong>定义MyAMQConfig配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ中的监听"><a href="#RabbitMQ中的监听" class="headerlink" title="RabbitMQ中的监听"></a>RabbitMQ中的监听</h2><h3 id="service层中的代码如下"><a href="#service层中的代码如下" class="headerlink" title="service层中的代码如下"></a>service层中的代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解的作用就是监听luo.new消息队列，一旦这个队列中有消息就会调用这个方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"luo.new"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到消息，消息是；"</span>+book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主配置类添加开启注解的RabbitMQ模式"><a href="#主配置类添加开启注解的RabbitMQ模式" class="headerlink" title="主配置类添加开启注解的RabbitMQ模式"></a>主配置类添加开启注解的RabbitMQ模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringbootRabbitmqApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AmqpAdmin的使用"><a href="#AmqpAdmin的使用" class="headerlink" title="AmqpAdmin的使用"></a>AmqpAdmin的使用</h2><p>使用AmqpAdmin创建和删除Queue和Exchange等</p><h3 id="测试如下"><a href="#测试如下" class="headerlink" title="测试如下"></a>测试如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    amqpAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(<span class="string">"amqpadmin.exchange"</span>));</span><br><span class="line">    System.out.println(<span class="string">"创建完成"</span>);</span><br><span class="line"></span><br><span class="line">    amqpAdmin.declareQueue(<span class="keyword">new</span> Queue(<span class="string">"amqpadmin.queue"</span>,<span class="keyword">true</span>));</span><br><span class="line">    <span class="comment">//创建绑定规则</span></span><br><span class="line">    amqpAdmin.declareBinding(<span class="keyword">new</span> Binding(<span class="string">"amqpadmin.queue"</span>,Binding.DestinationType.QUEUE,<span class="string">"amqpadmin.exchange"</span>,<span class="string">"amqp.test"</span>,<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot整合RabbitMQ&quot;&gt;&lt;a href=&quot;#SpringBoot整合RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合RabbitMQ&quot;&gt;&lt;/a&gt;SpringBoot整合RabbitMQ&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引入spring-boot-starter-amqp&lt;/li&gt;
&lt;li&gt;application.yml配置&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试RabbitMQ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AmqpAdmin：管理组件&lt;/li&gt;
&lt;li&gt;RabbitTemplate：消息发送处理组件
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习----SpringBoot高级（五）SpringBoot与消息</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0----SpringBoot%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%94%EF%BC%89SpringBoot%E4%B8%8E%E6%B6%88%E6%81%AF/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习----SpringBoot高级（五）SpringBoot与消息/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:26:05.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot与消息"><a href="#SpringBoot与消息" class="headerlink" title="SpringBoot与消息"></a>SpringBoot与消息</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>在大多数应用中，可以通过消息服务来提升系统异步通信，扩展解耦能力。</li><li>在消息服务中存在两个重要的概念：消息代理（message broker）和目的地（destination），当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地</li><li><p>消息队列主要有两种形式的目的地：队列（queue:点对点消息通信），主题（topic:发布/订阅消息通信）</p><a id="more"></a><p><strong>点对点式</strong></p></li><li><p>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</p></li><li>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</li></ul><p><strong>发布订阅式</strong></p><ul><li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息</li></ul><p><strong>JMS（JAva消息服务）</strong></p><ul><li>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</li></ul><p><strong>AMQP</strong></p><ul><li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li><li>RabbitMQ是AMQP的实现</li></ul><h2 id="JMS和AMQP区别"><a href="#JMS和AMQP区别" class="headerlink" title="JMS和AMQP区别"></a>JMS和AMQP区别</h2><table><thead><tr><th></th><th>JMS</th><th>AMQP</th></tr></thead><tbody><tr><td>定义</td><td>Java api</td><td>网络线级协议</td></tr><tr><td>跨语言</td><td>否</td><td>是</td></tr><tr><td>跨平台</td><td>否</td><td>是</td></tr><tr><td>Model</td><td>提供两种消息模型：<br>Peer-2-Peer和Pub/Sub</td><td>提供了五种消息模型：<br>1.direct exchange<br>2.fanout exchange<br>3.topic change<br>4.headers exchange<br>5.system sxchange</td></tr><tr><td>支持消息类型</td><td>多种消息类型<br>TextMessage<br>MapMessage<br>ByteMessage<br>StreamMessage<br>ObjectMessage<br>Message（只有消息和头和属性）</td><td>byte[]<br>当实际应用中，有复杂的消息，可以将消息序列化后发送</td></tr></tbody></table><p><strong>总体区别</strong></p><p>JMS定义了Java API层面的标准，在java体系中，多个客户端 均可以使用JMS进行交互，不需要修改代码，对跨平台支持性较差。AMPQ定义了wirte-levelc层的协议标准，天然具有跨平台，跨语言的特性。</p><h2 id="Spring支持"><a href="#Spring支持" class="headerlink" title="Spring支持"></a>Spring支持</h2><ul><li>spring-jms提供了对JMS的支持</li><li>spring-rabbit提供了对AMQP的支持</li><li>需要ConnectionFactory的实现来连接消息代理</li><li>提供JmsTemplate、RabbitTemplate来发送消息</li><li>@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息</li><li>@EnableJms、@EnableRabbit开启支持</li></ul><h2 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h2><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p><strong>Message</strong></p><p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）</p><p><strong>Publisher</strong></p><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p><p><strong>Exchange</strong></p><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。<br>Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</p><p><strong>Queue</strong></p><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</p><p><strong>Binding</strong></p><p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。<br>Exchange 和Queue的绑定可以是多对多的关系。</p><p><strong>Connection</strong></p><p>网络连接，比如一个TCP连接。</p><p><strong>Channel</strong></p><p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP 连接。</p><p><strong>Consumer</strong></p><p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p><p><strong>Virtual Host</strong></p><p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost 本质上就是一个mini 版的RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的vhost 是/ 。</p><p><strong>Broker</strong></p><p>表示消息队列服务器实体</p><p><strong>整体简单流程</strong></p><h2 id="RabbitMQ运行机制"><a href="#RabbitMQ运行机制" class="headerlink" title="RabbitMQ运行机制"></a>RabbitMQ运行机制</h2><p><strong>AMQP 中的消息路由</strong></p><p>AMQP 中消息的路由过程和Java 开发者熟悉的JMS 存在一些差别，AMQP 中增加了Exchange和Binding的角色。生产者把消息发布到Exchange 上，消息最终到达队列并被消费者接收，而Binding 决定交换器的消息应该发送到那个队列。</p><p><strong>Exchange 类型</strong></p><p>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers 。headers 匹配AMQP 消息的header 而不是路由键，headers 交换器和direct 交换器完全一致，但性能差很多，目前几乎用不到了,下面将对这三种进行说明。</p><p><strong>direct Exchange</strong></p><p>消息中的路由键（routing key）如果和Binding 中的binding key 一致，交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。</p><p><strong>fanout Exchange</strong></p><p>每个发到fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。</p><p><strong>topic Exchange</strong></p><p>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“<em>”。#匹配0个或多个单词，</em>匹配一个单词。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot与消息&quot;&gt;&lt;a href=&quot;#SpringBoot与消息&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot与消息&quot;&gt;&lt;/a&gt;SpringBoot与消息&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在大多数应用中，可以通过消息服务来提升系统异步通信，扩展解耦能力。&lt;/li&gt;
&lt;li&gt;在消息服务中存在两个重要的概念：消息代理（message broker）和目的地（destination），当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息队列主要有两种形式的目的地：队列（queue:点对点消息通信），主题（topic:发布/订阅消息通信）&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://caochenhins.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE进阶知识学习-----SpringCloud（四）Eureka集群配置</title>
    <link href="https://caochenhins.github.io/2019/03/22/JavaEE%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-----SpringCloud%EF%BC%88%E5%9B%9B%EF%BC%89Eureka%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <id>https://caochenhins.github.io/2019/03/22/JavaEE进阶知识学习-----SpringCloud（四）Eureka集群配置/</id>
    <published>2019-03-22T11:44:55.000Z</published>
    <updated>2019-03-22T12:21:09.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka集群配置"><a href="#Eureka集群配置" class="headerlink" title="Eureka集群配置"></a>Eureka集群配置</h1><p>microservicecloud-eureka-7001使EurekaServer服务注册中心，一旦这个出现问题，那么微服务就不能正常的工作，为防止这种情况，所以出现了集群，就是建立多个microservicecloud-eureka-7002，microservicecloud-eureka-7003等服务注册中心。</p><ul><li>新建microservicecloud-eureka-7002，microservicecloud-eureka-7003服务注册中心</li><li>根据microservicecloud-eureka-7001的pom.xml修改7002和7003的pom.xml文件</li><li>复制7001的主程序启动类，并修改为7002,7003即可<a id="more"></a><h2 id="修改映射配置"><a href="#修改映射配置" class="headerlink" title="修改映射配置"></a>修改映射配置</h2></li></ul><p>在7001注册中的application.yml文件中hostname，不能与7002,7003相同，所以要做映射配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br></pre></td></tr></table></figure><p><strong>修改C:\Windows\System32\drivers\etc\host文件</strong>,让127.0.0.1有三个别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br><span class="line">127.0.0.1 eureka7003.com</span><br></pre></td></tr></table></figure><h2 id="microservicecloud-eureka-7001中的yml修改"><a href="#microservicecloud-eureka-7001中的yml修改" class="headerlink" title="microservicecloud-eureka-7001中的yml修改"></a>microservicecloud-eureka-7001中的yml修改</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">  port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">  client:</span> </span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line">      <span class="comment">#单机 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       </span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="microservicecloud-eureka-7002中的yml修改"><a href="#microservicecloud-eureka-7002中的yml修改" class="headerlink" title="microservicecloud-eureka-7002中的yml修改"></a>microservicecloud-eureka-7002中的yml修改</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">  port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">  client:</span> </span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line">      <span class="comment">#单机 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       </span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="microservicecloud-eureka-7003中的yml修改"><a href="#microservicecloud-eureka-7003中的yml修改" class="headerlink" title="microservicecloud-eureka-7003中的yml修改"></a>microservicecloud-eureka-7003中的yml修改</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">  port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">eureka7003.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">  client:</span> </span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line">      <span class="comment">#单机 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       </span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="修改dept微服务的yml文件"><a href="#修改dept微服务的yml文件" class="headerlink" title="修改dept微服务的yml文件"></a>修改dept微服务的yml文件</h2><p>dept微服务会同时注册到7001,7002,7003服务注册中心</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span> <span class="comment">#客户端注册进eureka服务列表内</span></span><br><span class="line"><span class="attr">    service-url:</span> </span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>访问eureka7001.com:7001</li><li>访问eureka7002.com:7002</li><li>访问eureka7003.com:7003</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Eureka集群配置&quot;&gt;&lt;a href=&quot;#Eureka集群配置&quot; class=&quot;headerlink&quot; title=&quot;Eureka集群配置&quot;&gt;&lt;/a&gt;Eureka集群配置&lt;/h1&gt;&lt;p&gt;microservicecloud-eureka-7001使EurekaServer服务注册中心，一旦这个出现问题，那么微服务就不能正常的工作，为防止这种情况，所以出现了集群，就是建立多个microservicecloud-eureka-7002，microservicecloud-eureka-7003等服务注册中心。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建microservicecloud-eureka-7002，microservicecloud-eureka-7003服务注册中心&lt;/li&gt;
&lt;li&gt;根据microservicecloud-eureka-7001的pom.xml修改7002和7003的pom.xml文件&lt;/li&gt;
&lt;li&gt;复制7001的主程序启动类，并修改为7002,7003即可
    
    </summary>
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://caochenhins.github.io/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
